project(HArD::Core3D)
CMAKE_MINIMUM_REQUIRED(VERSION 3.5)

# Location to print results
ADD_DEFINITIONS(-DROOT_OUTDIR=${CMAKE_SOURCE_DIR}/runs)

#------------------------------------------------------------------------------#
#                             Compiler setup
#------------------------------------------------------------------------------#
IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  SET(ADDITIONAL_FLAGS "-DWIN32")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

SET(WITH_PETSC_MPI "True")
IF(WITH_PETSC_MPI)
  SET(ADDITIONAL_FLAGS "${ADDITIONAL_FLAGS} -DSOLVE_WITH_PETSC_MPI")
  MESSAGE(STATUS "Building with petsc and mpi support")
ENDIF()

SET(CMAKE_CXX_COMPILER "c++")
#SET(CMAKE_CXX_COMPILER "clang++")
SET(CMAKE_CXX_FLAGS "-std=c++20 -g -Wall -Wpedantic -Werror")
SET(CMAKE_CXX_FLAGS_DEBUGALL "${CMAKE_CXX_FLAGS} -Og -DDEBUG -fsanitize=address,undefined -pthread ${ADDITIONAL_FLAGS}" )
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -O3 -DOPTIMIZE -DDEBUG -pthread ${ADDITIONAL_FLAGS}" )
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -O3 -DNDEBUG -DOPTIMIZE -pthread ${ADDITIONAL_FLAGS}" )
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS} -O3 -g -DNDEBUG -DOPTIMIZE -pthread ${ADDITIONAL_FLAGS}" )

#SET(CMAKE_BUILD_TYPE Debug)
#SET(CMAKE_BUILD_TYPE Debugall)
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Choose the type of build: Debug Release RelWithDebInfo" FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)
MESSAGE(STATUS "Build type : ${CMAKE_BUILD_TYPE}")
#------------------------------------------------------------------------------#
#                             Required libraries
#------------------------------------------------------------------------------#

SET(Boost_DEBUG "ON")
SET(Boost_USE_STATIC_LIBS "ON")
SET(HOME_DIR ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL "")
SET(CMAKE_MODULE_PATH ${HOME_DIR}/CMake)

FIND_PACKAGE(Boost COMPONENTS filesystem program_options timer chrono REQUIRED)
SET(EXTERNAL_INCLUDES ${Boost_INCLUDE_DIR})
SET(EXTERNAL_LIBRARIES ${Boost_LIBRARIES})

FIND_PACKAGE(Eigen3 3.3.4)
SET(EXTERNAL_INCLUDES ${EXTERNAL_INCLUDES} ${EIGEN3_INCLUDE_DIR})

FIND_PACKAGE(SUPERLU)
IF(SUPERLU_FOUND)
  MESSAGE(STATUS "SUPERLU Found")
  SET(EXTERNAL_LIBRARIES ${EXTERNAL_LIBRARIES} ${SUPERLU_LIBRARIES})
  SET(EXTERNAL_INCLUDES ${EXTERNAL_INCLUDES} ${SUPERLU_INCLUDES})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_SUPERLU")
ENDIF()

FIND_PACKAGE(UMFPACK)
IF(UMFPACK_FOUND)
  MESSAGE(STATUS "UMFPACK Found")
  SET(EXTERNAL_LIBRARIES ${EXTERNAL_LIBRARIES} ${UMFPACK_LIBRARIES})
  SET(EXTERNAL_INCLUDES ${EXTERNAL_INCLUDES} ${UMFPACK_INCLUDES})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_UMFPACK")  
ENDIF()

FIND_PACKAGE(MKL)
IF(MKL_FOUND)
  MESSAGE(STATUS "MKL Found")
  SET(EXTERNAL_LIBRARIES ${EXTERNAL_LIBRARIES} ${MKL_LIBRARIES})
  SET(EXTERNAL_INCLUDES ${EXTERNAL_INCLUDES} ${MKL_INCLUDES})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_MKL")  
ENDIF()

#FIND_PACKAGE(PASTIX)
#IF(PASTIX_FOUND)
#  MESSAGE(STATUS "PASTIX Found")
#  SET(EXTERNAL_LIBRARIES ${EXTERNAL_LIBRARIES} ${PASTIX_LIBRARIES})
#  SET(EXTERNAL_INCLUDES ${EXTERNAL_INCLUDES} ${PASTIX_INCLUDES})
#  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_PASTIX")  
#ENDIF()

IF (WITH_PETSC_MPI)
  FIND_PACKAGE(MPI REQUIRED)
  FIND_PACKAGE(PkgConfig REQUIRED)
  SET(ENV{PKG_CONFIG_PATH} "/home/user/.petsclib/lib/pkgconfig/")
  PKG_CHECK_MODULES(PETSC REQUIRED PETSc)
  MESSAGE(STATUS "MPI and PETsc Found")
  SET(EXTERNAL_LIBRARIES_MPI ${EXTERNAL_LIBRARIES} ${MPI_CXX_LIBRARIES} ${MPI_CXX_LINK_FLAGS} ${PETSC_LDFLAGS})
  SET(EXTERNAL_INCLUDES_MPI ${EXTERNAL_INCLUDES} ${MPI_CXX_INCLUDE_PATH} ${PETSC_INCLUDE_DIRS})
ENDIF()

INCLUDE_DIRECTORIES(${EXTERNAL_INCLUDES})

IF (WITH_NB_THREADS)
  ADD_DEFINITIONS(-DNB_THREADS=${WITH_NB_THREADS})
  MESSAGE(STATUS "Forcing to use ${WITH_NB_THREADS} threads")
ENDIF()
#------------------------------------------------------------------------------#
#                             Directories for compiled libraries
#------------------------------------------------------------------------------#

INCLUDE_DIRECTORIES(include/Math)
INCLUDE_DIRECTORIES(include/Mesh)
INCLUDE_DIRECTORIES(src/Mesh)
INCLUDE_DIRECTORIES(src/Quadrature)
INCLUDE_DIRECTORIES(src/Common)
INCLUDE_DIRECTORIES(src/HybridCore)
INCLUDE_DIRECTORIES(src/Plot)
INCLUDE_DIRECTORIES(src/DDRCore)
#INCLUDE_DIRECTORIES(src/DDRCore-orth)
INCLUDE_DIRECTORIES(src/VEMCore)
INCLUDE_DIRECTORIES(src/StokesCore)
INCLUDE_DIRECTORIES(src/Solver)
INCLUDE_DIRECTORIES(src/Savestates)

ADD_SUBDIRECTORY(src/Mesh)
ADD_SUBDIRECTORY(src/Quadrature)
ADD_SUBDIRECTORY(src/Common)
ADD_SUBDIRECTORY(src/HybridCore)
ADD_SUBDIRECTORY(src/Plot)
ADD_SUBDIRECTORY(src/DDRCore)
#ADD_SUBDIRECTORY(src/DDRCore-orth)
ADD_SUBDIRECTORY(src/VEMCore)
ADD_SUBDIRECTORY(src/StokesCore)
ADD_SUBDIRECTORY(src/Solver)
ADD_SUBDIRECTORY(src/Savestates)

#------------------------------------------------------------------------------#
#                             Directories for schemes
#------------------------------------------------------------------------------#

INCLUDE_DIRECTORIES(Schemes)
ADD_SUBDIRECTORY(Schemes)

