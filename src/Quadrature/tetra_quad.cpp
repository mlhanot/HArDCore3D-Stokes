/*
  CREDITS:
  Gianmarco Manzini
  IMATI-CNR
  via Ferrata 1
  27100 Pavia

  DATE: Nov 29, 2008

	SEPARATE hpp/cpp implementation by Jerome Droniou (jerome.droniou@monash.edu)

  PREVIOUS CREDITS: this set of routines is a C++ re-implementation of
  part of John Burkardt's software for geometric calculations (2005), which
  is freely available on Internet (see his homepage)

  COPY-LEFT: Feel free to use this software under GNU Public Licence (GPL) terms.
*/

#include "tetra_quad.hpp"


namespace HArDCore3D {

double parallelipiped_volume_3d(double x[4], double y[4], double z[4]) {
  return std::abs((z[1] - z[0]) * (y[3] * x[2] - y[2] * x[3]) +
                  (z[2] - z[0]) * (x[3] * y[1] - x[1] * y[3]) +
                  (z[3] - z[0]) * (x[1] * y[2] - x[2] * y[1]) +
                  (z[2] - z[1]) * (y[3] * x[0] - y[0] * x[3]) +
                  (z[3] - z[1]) * (x[2] * y[0] - x[0] * y[2]) +
                  (z[3] - z[2]) * (x[0] * y[1] - x[1] * y[0]));
}


double tetra_unit_volume() { return 1.0 / 6.0; }

double tetra_volume(double x[4], double y[4], double z[4]) {
  return parallelipiped_volume_3d(x, y, z) * tetra_unit_volume();
}

double tetra_sum(double func(double x, double y, double z),
                 double x[4], double y[4], double z[4],
                 size_t nq, double cq0[], double cq1[], double cq2[], double wq[]) {
  double sum = 0.0;
  for (size_t iq = 0; iq < nq; ++iq) {
    double cq3 = 1.0 - cq0[iq] - cq1[iq] - cq2[iq];
    double xq = cq0[iq] * x[0] + cq1[iq] * x[1] + cq2[iq] * x[2] + cq3 * x[3];
    double yq = cq0[iq] * y[0] + cq1[iq] * y[1] + cq2[iq] * y[2] + cq3 * y[3];
    double zq = cq0[iq] * z[0] + cq1[iq] * z[1] + cq2[iq] * z[2] + cq3 * z[3];
    sum += wq[iq] * func(xq, yq, zq);
  }
  return sum * tetra_volume(x, y, z);
}

double tetra_unit_sum(double func(double x, double y, double z),
                      size_t nq, double xq[], double yq[], double zq[], double wq[]) {
  double sum = 0.;
  for (size_t iq = 0; iq < nq; ++iq) {
    sum += wq[iq] * func(xq[iq], yq[iq], zq[iq]);
  }
  return sum * tetra_unit_volume();
}

size_t tetra_unit_size(size_t rule) {
  size_t nq;
  switch (rule) {
    case 0 :
      nq = 1;
      break; //  exact=1, Newton Cotes #0, (also Zienkiewicz #1);
    case 1 :
      nq = 4;
      break; //  exact=1, Newton Cotes #1
    case 2 :
      nq = 4;
      break; //  exact=2, Zienkiewicz  #2
  /*  case 2 :
      nq = 10;
      break; //  exact=2, Newton Cotes #2 */
    case 3 :
      nq = 5;
      break; //  exact=3, Zienkiewicz  #3
 /*   case 3 :
      nq = 8;
      break; //  exact=3, Newton Cotes #3 (20-point formula with 12 zero weights) */
/*
    case 3 :  // Symmetric rules with optimisation obtained from JCAM paper "Symmetric quadrature rules for tetrahedra based on a cubic closed-packed lattice arrangement" by Shunn and Ham
	nq = 10;
	break; //  exact=3, Symmetric rule (optimisation) with nonnegative weights #3 */
    case 4 :
      nq = 14;
      break; //  exact=4, Symmetric rule
/*    case 4 :
      nq = 35;
      break; //  exact=4, Newton Cotes #4 (very accurate) */
//    case 5 :
//      nq = 84;
//      break; //  exact=5, Newton Cotes #5
    case 5 :
	nq = 20;
	break; // exact=5, Symmetric rule (optimisation) with nonnegative weights #4    
    case 6 :
	nq = 35;
	break; // exact=6, Symmetric rule (optimisation) with nonnegative weights #5 
 /*   case 6: // Symmetric rules obtained from "A set of symmetric quadrature rules on triangles and tetrahedra" by Zhang, Cui, and Liu
	nq = 35;
	break; // exact=6, Symmetric rule */
    case 7 : 
	nq = 46;
	break; // exact = 7, Symmetric rule
    case 8 :
      nq = 45;
      break; //  exact=8, Keast
 /*   case 8 : 
	nq = 56;
	break; // exact=8, Symmetric rule (optimisation) with nonnegative weights #6 

    case 8 : 
	nq = 59;
	break; // exact = 8, Symmetric rule */
    case 9 : 
	nq = 79;
	break; // exact = 9, Symmetric rule
    case 10 : 
	nq = 96;
	break; // exact = 10, Symmetric rule
    case 11 : 
	nq = 127;
	break; // exact = 11, Symmetric rule
    case 12 : 
	nq = 149;
	break; // exact = 12, Symmetric rule
    case 13 : 
	nq = 194;
	break; // exact = 13, Symmetric rule
    case 14 : 
	nq = 246;
	break; // exact = 14, Symmetric rule

      //case 7 : nq = 11 ; break ; //  precision=4, Keast Rule of order 11 (NOT WORKING)
    default :
      std::cerr << "\n";
      std::cerr << "TETRA_UNIT_SIZE - Fatal error!\n";
      std::cerr << "Illegal value of RULE = " << rule << "\n";
      exit(1);
  }
  return nq;
}

void tetra_unit_set(size_t rule,
                    size_t nq, double cq0[], double cq1[], double cq2[], double wq[]) {
  double a = std::numeric_limits<double>::quiet_NaN(); // Avoid maybe-uninitialized 
  double b = std::numeric_limits<double>::quiet_NaN();
  double c = std::numeric_limits<double>::quiet_NaN();
  double d = std::numeric_limits<double>::quiet_NaN();
  double e = std::numeric_limits<double>::quiet_NaN();
  double f = std::numeric_limits<double>::quiet_NaN();
  double g = std::numeric_limits<double>::quiet_NaN();
  double h = std::numeric_limits<double>::quiet_NaN();
  double p = std::numeric_limits<double>::quiet_NaN();
  double q = std::numeric_limits<double>::quiet_NaN();
  double z = std::numeric_limits<double>::quiet_NaN();
  int ctr;
  switch (rule) {
    case 0 : //  Newton Cotes #0
      assert(nq == 1);
      cq0[0] = 0.25;
      cq1[0] = 0.25;
      cq2[0] = 0.25;

      wq[0] = 1.0;
      break;
    case 1 : //  Newton Cotes #1
      assert(nq == 4);

      a = 1.0;
      b = 1.0 / 4.0;
      z = 0.0;

      cq0[0] = z;
      cq0[1] = a;
      cq0[2] = z;
      cq0[3] = z;

      cq1[0] = z;
      cq1[1] = z;
      cq1[2] = a;
      cq1[3] = z;

      cq2[0] = z;
      cq2[1] = z;
      cq2[2] = z;
      cq2[3] = a;

      wq[0] = b;
      wq[1] = b;
      wq[2] = b;
      wq[3] = b;
      break;
    case 2 : //  Zienkiewicz #2
      assert(nq == 4);

      a = 0.5854101966249685;
      b = 0.1381966011250105;
      c = 0.25;

      cq0[0] = a;
      cq0[1] = b;
      cq0[2] = b;
      cq0[3] = b;

      cq1[0] = b;
      cq1[1] = a;
      cq1[2] = b;
      cq1[3] = b;

      cq2[0] = b;
      cq2[1] = b;
      cq2[2] = a;
      cq2[3] = b;

      wq[0] = c;
      wq[1] = c;
      wq[2] = c;
      wq[3] = c;
      break;
   /* case 2 : //  Newton Cotes #2
      assert(nq == 10);

      a = 1.0;
      b = 0.5;
      c = -1.0 / 20.0;
      d = 4.0 / 20.0;
      z = 0.0;

      cq0[0] = z;
      cq0[1] = a;
      cq0[2] = z;
      cq0[3] = z;
      cq0[4] = b;
      cq0[5] = z;
      cq0[6] = z;
      cq0[7] = b;
      cq0[8] = b;
      cq0[9] = z;

      cq1[0] = z;
      cq1[1] = z;
      cq1[2] = a;
      cq1[3] = z;
      cq1[4] = z;
      cq1[5] = b;
      cq1[6] = z;
      cq1[7] = b;
      cq1[8] = z;
      cq1[9] = b;

      cq2[0] = z;
      cq2[1] = z;
      cq2[2] = z;
      cq2[3] = a;
      cq2[4] = z;
      cq2[5] = z;
      cq2[6] = b;
      cq2[7] = z;
      cq2[8] = b;
      cq2[9] = b;

      wq[0] = c;
      wq[1] = c;
      wq[2] = c;
      wq[3] = c;
      wq[4] = d;
      wq[5] = d;
      wq[6] = d;
      wq[7] = d;
      wq[8] = d;
      wq[9] = d;
      break; */
    case 3 : //  Zienkiewicz #3
      assert(nq == 5);

      a = 1.0 / 6.0;
      b = 0.25;
      c = 0.5;
      d = -0.8;
      e = 0.45;

      cq0[0] = b;
      cq0[1] = c;
      cq0[2] = a;
      cq0[3] = a;
      cq0[4] = a;

      cq1[0] = b;
      cq1[1] = a;
      cq1[2] = c;
      cq1[3] = a;
      cq1[4] = a;

      cq2[0] = b;
      cq2[1] = a;
      cq2[2] = a;
      cq2[3] = c;
      cq2[4] = a;

      wq[0] = d;
      wq[1] = e;
      wq[2] = e;
      wq[3] = e;
      wq[4] = e;
      break;
   /* case 3 : //  Newton Cotes #3
      // (Formally, this is a 20 point rule, but with 12 zero coefficients.)
      assert(nq == 8);

      a = 1.0;
      b = 1.0 / 40.0;
      c = 1.0 / 3.0;
      d = 9.0 / 40.0;
      z = 0.0;

      cq0[0] = z;
      cq0[1] = a;
      cq0[2] = z;
      cq0[3] = z;
      cq0[4] = c;
      cq0[5] = c;
      cq0[6] = z;
      cq0[7] = c;

      cq1[0] = z;
      cq1[1] = z;
      cq1[2] = a;
      cq1[3] = z;
      cq1[4] = c;
      cq1[5] = z;
      cq1[6] = c;
      cq1[7] = c;

      cq2[0] = z;
      cq2[1] = z;
      cq2[2] = z;
      cq2[3] = a;
      cq2[4] = z;
      cq2[5] = c;
      cq2[6] = c;
      cq2[7] = c;

      wq[0] = b;
      wq[1] = b;
      wq[2] = b;
      wq[3] = b;
      wq[4] = d;
      wq[5] = d;
      wq[6] = d;
      wq[7] = d;
      break;
*/

/*
    case 3 : //  Symmetric rule with nonnegative weights, 3 layers
      assert(nq == 10);

      a = 0.7784952948213300;
      b = 0.0738349017262234;
      c = 0.4062443438840510;
      d = 0.0937557571159491;
      e = 0.0476331348432089;
      f = 0.1349112434378610;	
      z = 0.0;

      cq0[0] = a;
      cq0[1] = b;
      cq0[2] = b;
      cq0[3] = b;
      cq0[4] = c;
      cq0[5] = c;
      cq0[6] = c;
      cq0[7] = d;
      cq0[8] = d;
      cq0[9] = d;

      cq1[0] = b;
      cq1[1] = a;
      cq1[2] = b;
      cq1[3] = b;
      cq1[4] = c;
      cq1[5] = d;
      cq1[6] = d;
      cq1[7] = c;
      cq1[8] = c;
      cq1[9] = d;

      cq2[0] = b;
      cq2[1] = b;
      cq2[2] = a;
      cq2[3] = b;
      cq2[4] = d;
      cq2[5] = c;
      cq2[6] = d;
      cq2[7] = c;
      cq2[8] = d;
      cq2[9] = c;

      wq[0] = e;
      wq[1] = e;
      wq[2] = e;
      wq[3] = e;
      wq[4] = f;
      wq[5] = f;
      wq[6] = f;
      wq[7] = f;
      wq[8] = f;
      wq[9] = f;
      break;
*/
case 4 : //  Symmetric rule with nonnegative weights, order 5

      assert(nq == 14);

	
	ctr = 0;
//2 S31 symmetry orbits, 4 points each
for(int j=0; j<2; j++){
	if(j==0){
	b = 0.31088591926330060979734573376345783;
	}
	if(j==1){
	b = 0.09273525031089122640232391373703061;	
	}
	cq0[ctr] = b;
	cq0[ctr+1] = 1.0-3*b;
	cq0[ctr+2] = b;
	cq0[ctr+3] = b;

	cq1[ctr] = b;
	cq1[ctr+1] = b;
	cq1[ctr+2] = 1.0-3*b;
	cq1[ctr+3] = b;

	cq2[ctr] = b;	
	cq2[ctr+1] = b;	
	cq2[ctr+2] = b;
	cq2[ctr+3] = 1.0-3*b;
	

	for (int i=0; i<4; i++)
	{
		if(j==0){
		wq[ctr+i] = 0.11268792571801585079918565233328633;
		}
		if(j==1){
		wq[ctr+i] = 0.07349304311636194954371020548632750;
		}
	}
	ctr = ctr+4;
}
// S22 symmetry orbit, 6 points
	c = 0.04550370412564964949188052627933943; 
      
      cq0[ctr] = c;
      cq0[ctr+1] = c;
      cq0[ctr+2] = c;
      cq0[ctr+3] = 0.5-c;
      cq0[ctr+4] = 0.5-c;
      cq0[ctr+5] = 0.5-c;

      cq1[ctr] = c;
      cq1[ctr+1] = 0.5-c;
      cq1[ctr+2] = 0.5-c;
      cq1[ctr+3] = c;
      cq1[ctr+4] = 0.5-c;
      cq1[ctr+5] = c;

      cq2[ctr] = 0.5-c;
      cq2[ctr+1] = 0.5-c;
      cq2[ctr+2] = c;
      cq2[ctr+3] = c;
      cq2[ctr+4] = c;
      cq2[ctr+5] = 0.5-c;
	for (int i=0; i<6; i++)
	{
		wq[ctr+i] = 0.04254602077708146643806942812025744;
	}
      ctr = ctr+6;
	
      break;
 /*  case 4 : //  Newton Cotes #4
      assert(nq == 35);

      a = 0.25;
      b = 0.50;
      c = 0.75;
      d = 1.00;
      e = -5.0 / 420.0;
      f = -12.0 / 420.0;
      g = 16.0 / 420.0;
      h = 128.0 / 420.0;
      z = 0.0;

      cq0[0] = z;
      cq0[1] = d;
      cq0[2] = z;
      cq0[3] = z;
      cq0[4] = a;
      cq0[5] = z;
      cq0[6] = z;
      cq0[7] = c;
      cq0[8] = c;
      cq0[9] = c;
      cq0[10] = z;
      cq0[11] = a;
      cq0[12] = z;
      cq0[13] = z;
      cq0[14] = a;
      cq0[15] = z;
      cq0[16] = b;
      cq0[17] = z;
      cq0[18] = z;
      cq0[19] = b;
      cq0[20] = b;
      cq0[21] = z;
      cq0[22] = a;
      cq0[23] = b;
      cq0[24] = a;
      cq0[25] = a;
      cq0[26] = b;
      cq0[27] = z;
      cq0[28] = b;
      cq0[29] = z;
      cq0[30] = a;
      cq0[31] = a;
      cq0[32] = z;
      cq0[33] = a;
      cq0[34] = a;

      cq1[0] = z;
      cq1[1] = z;
      cq1[2] = d;
      cq1[3] = z;
      cq1[4] = z;
      cq1[5] = a;
      cq1[6] = z;
      cq1[7] = z;
      cq1[8] = a;
      cq1[9] = z;
      cq1[10] = c;
      cq1[11] = c;
      cq1[12] = c;
      cq1[13] = z;
      cq1[14] = z;
      cq1[15] = a;
      cq1[16] = z;
      cq1[17] = b;
      cq1[18] = z;
      cq1[19] = b;
      cq1[20] = z;
      cq1[21] = b;
      cq1[22] = a;
      cq1[23] = a;
      cq1[24] = b;
      cq1[25] = z;
      cq1[26] = z;
      cq1[27] = a;
      cq1[28] = a;
      cq1[29] = b;
      cq1[30] = b;
      cq1[31] = z;
      cq1[32] = a;
      cq1[33] = a;
      cq1[34] = a;

      cq2[0] = z;
      cq2[1] = z;
      cq2[2] = z;
      cq2[3] = d;
      cq2[4] = z;
      cq2[5] = z;
      cq2[6] = a;
      cq2[7] = z;
      cq2[8] = z;
      cq2[9] = a;
      cq2[10] = z;
      cq2[11] = z;
      cq2[12] = a;
      cq2[13] = c;
      cq2[14] = c;
      cq2[15] = c;
      cq2[16] = z;
      cq2[17] = z;
      cq2[18] = b;
      cq2[19] = z;
      cq2[20] = b;
      cq2[21] = b;
      cq2[22] = z;
      cq2[23] = z;
      cq2[24] = z;
      cq2[25] = a;
      cq2[26] = a;
      cq2[27] = a;
      cq2[28] = a;
      cq2[29] = a;
      cq2[30] = a;
      cq2[31] = b;
      cq2[32] = b;
      cq2[33] = b;
      cq2[34] = a;

      wq[0] = e;
      wq[1] = e;
      wq[2] = e;
      wq[3] = e;
      wq[4] = g;
      wq[5] = g;
      wq[6] = g;
      wq[7] = g;
      wq[8] = g;
      wq[9] = g;
      wq[10] = g;
      wq[11] = g;
      wq[12] = g;
      wq[13] = g;
      wq[14] = g;
      wq[15] = g;
      wq[16] = f;
      wq[17] = f;
      wq[18] = f;
      wq[19] = f;
      wq[20] = f;
      wq[21] = f;
      wq[22] = g;
      wq[23] = g;
      wq[24] = g;
      wq[25] = g;
      wq[26] = g;
      wq[27] = g;
      wq[28] = g;
      wq[29] = g;
      wq[30] = g;
      wq[31] = g;
      wq[32] = g;
      wq[33] = g;
      wq[34] = h;
      break;
*/

    case 5 : //  Symmetric rule with nonnegative weights, 4 layers
      assert( nq == 20 );
      a = 0.9029422158182680;
      b = 0.0323525947272439;
      c = 0.2626825838877790;
      d = 0.6165965330619370;
      e = 0.0603604415251421;
      f = 0.3097693042728620;
      g = 0.0706920871814129;
      h = 0.0070670747944695;
      p	= 0.0469986689718877;
      q = 0.1019369182898680;
      z = 0.0;

      cq0[0] = a;
      cq0[1] = b;
      cq0[2] = b;
      cq0[3] = b;
      cq0[4] = c;
      cq0[5] = d;
      cq0[6] = c;
      cq0[7] = d;
      cq0[8] = c;
      cq0[9] = d;
      cq0[10] = e;
      cq0[11] = e;
      cq0[12] = e;
      cq0[13] = e;
      cq0[14] = e;
      cq0[15] = e;
      cq0[16] = f;
      cq0[17] = f;
      cq0[18] = f;
      cq0[19] = g;
      
      cq1[0] = b;
      cq1[1] = a;
      cq1[2] = b;
      cq1[3] = b;
      cq1[4] = d;
      cq1[5] = c;
      cq1[6] = e;
      cq1[7] = e;
      cq1[8] = e;
      cq1[9] = e;
      cq1[10] = c;
      cq1[11] = d;
      cq1[12] = c;
      cq1[13] = d;
      cq1[14] = e;
      cq1[15] = e;
      cq1[16] = f;
      cq1[17] = f;
      cq1[18] = g;
      cq1[19] = f;
     

      cq2[0] = b;
      cq2[1] = b;
      cq2[2] = a;
      cq2[3] = b;
      cq2[4] = e;
      cq2[5] = e;
      cq2[6] = d;
      cq2[7] = c;
      cq2[8] = e;
      cq2[9] = e;
      cq2[10] = d;
      cq2[11] = c;
      cq2[12] = e;
      cq2[13] = e;
      cq2[14] = c;
      cq2[15] = d;
      cq2[16] = f;
      cq2[17] = g;
      cq2[18] = f;
      cq2[19] = f;

      wq[0] = h;
      wq[1] = h;
      wq[2] = h;
      wq[3] = h;
      wq[4] = p;
      wq[5] = p;
      wq[6] = p;
      wq[7] = p;
      wq[8] = p;
      wq[9] = p;
      wq[10] = p;
      wq[11] = p;
      wq[12] = p;
      wq[13] = p;
      wq[14] = p;
      wq[15] = p;
      wq[16] = q;
      wq[17] = q;
      wq[18] = q;
      wq[19] = q;

      break;
    case 6: //  Symmetric rule with nonnegative weights, 5 layers
	assert(nq == 35);

      cq0[0] = 0.9197896733368800;
      cq0[1] = 0.0267367755543735;
      cq0[2] = 0.0267367755543735;
      cq0[3] = 0.0267367755543735;
      cq0[4] = 0.1740356302468940;
      cq0[5] = 0.7477598884818090;
      cq0[6] = 0.1740356302468940;
      cq0[7] = 0.7477598884818090;
      cq0[8] = 0.1740356302468940;
      cq0[9] = 0.7477598884818090;
      cq0[10] = 0.0391022406356488;
      cq0[11] = 0.0391022406356488;
      cq0[12] = 0.0391022406356488;
      cq0[13] = 0.0391022406356488;
      cq0[14] = 0.0391022406356488;
      cq0[15] = 0.0391022406356488;
      cq0[16] = 0.4547545999844830;
      cq0[17] = 0.4547545999844830;
      cq0[18] = 0.4547545999844830;
      cq0[19] = 0.0452454000155172;
      cq0[20] = 0.0452454000155172;
      cq0[21] = 0.0452454000155172;
      cq0[22] = 0.5031186450145980;
      cq0[23] = 0.2232010379623150;
      cq0[24] = 0.2232010379623150;
      cq0[25] = 0.5031186450145980;
      cq0[26] = 0.2232010379623150;
      cq0[27] = 0.2232010379623150;
      cq0[28] = 0.5031186450145980;
      cq0[29] = 0.2232010379623150;
      cq0[30] = 0.2232010379623150;
      cq0[31] = 0.0504792790607720;
      cq0[32] = 0.0504792790607720;
      cq0[33] = 0.0504792790607720;
      cq0[34] = 0.2500000000000000;

      cq1[0] = 0.0267367755543735;
      cq1[1] = 0.9197896733368800;
      cq1[2] = 0.0267367755543735;
      cq1[3] = 0.0267367755543735;
      cq1[4] = 0.7477598884818090;
      cq1[5] = 0.1740356302468940;
      cq1[6] = 0.0391022406356488;
      cq1[7] = 0.0391022406356488;
      cq1[8] = 0.0391022406356488;
      cq1[9] = 0.0391022406356488;
      cq1[10] = 0.1740356302468940;
      cq1[11] = 0.7477598884818090;
      cq1[12] = 0.1740356302468940;
      cq1[13] = 0.7477598884818090;
      cq1[14] = 0.0391022406356488;
      cq1[15] = 0.0391022406356488;
      cq1[16] = 0.4547545999844830;
      cq1[17] = 0.0452454000155172;
      cq1[18] = 0.0452454000155172;
      cq1[19] = 0.4547545999844830;
      cq1[20] = 0.4547545999844830;
      cq1[21] = 0.0452454000155172;
      cq1[22] = 0.2232010379623150;
      cq1[23] = 0.5031186450145980;
      cq1[24] = 0.2232010379623150;
      cq1[25] = 0.2232010379623150;
      cq1[26] = 0.5031186450145980;
      cq1[27] = 0.2232010379623150;
      cq1[28] = 0.0504792790607720;
      cq1[29] = 0.0504792790607720;
      cq1[30] = 0.0504792790607720;
      cq1[31] = 0.5031186450145980;
      cq1[32] = 0.2232010379623150;
      cq1[33] = 0.2232010379623150;
      cq1[34] = 0.2500000000000000;

      cq2[0] = 0.0267367755543735;
      cq2[1] = 0.0267367755543735;
      cq2[2] = 0.9197896733368800;
      cq2[3] = 0.0267367755543735;
      cq2[4] = 0.0391022406356488;
      cq2[5] = 0.0391022406356488;
      cq2[6] = 0.7477598884818090;
      cq2[7] = 0.1740356302468940;
      cq2[8] = 0.0391022406356488;
      cq2[9] = 0.0391022406356488;
      cq2[10] = 0.7477598884818090;
      cq2[11] = 0.1740356302468940;
      cq2[12] = 0.0391022406356488;
      cq2[13] = 0.0391022406356488;
      cq2[14] = 0.1740356302468940;
      cq2[15] = 0.7477598884818090;
      cq2[16] = 0.0452454000155172;
      cq2[17] = 0.4547545999844830;
      cq2[18] = 0.0452454000155172;
      cq2[19] = 0.4547545999844830;
      cq2[20] = 0.0452454000155172;
      cq2[21] = 0.4547545999844830;
      cq2[22] = 0.2232010379623150;
      cq2[23] = 0.2232010379623150;
      cq2[24] = 0.5031186450145980;
      cq2[25] = 0.0504792790607720;
      cq2[26] = 0.0504792790607720;
      cq2[27] = 0.0504792790607720;
      cq2[28] = 0.2232010379623150;
      cq2[29] = 0.5031186450145980;
      cq2[30] = 0.2232010379623150;
      cq2[31] = 0.2232010379623150;
      cq2[32] = 0.5031186450145980;
      cq2[33] = 0.2232010379623150;
      cq2[34] = 0.2500000000000000;

      wq[0] = 0.0021900463965388;
      wq[1] = 0.0021900463965388;
      wq[2] = 0.0021900463965388;
      wq[3] = 0.0021900463965388;
      wq[4] = 0.0143395670177665;
      wq[5] = 0.0143395670177665;
      wq[6] = 0.0143395670177665;
      wq[7] = 0.0143395670177665;
      wq[8] = 0.0143395670177665;
      wq[9] = 0.0143395670177665;
      wq[10] = 0.0143395670177665;
      wq[11] = 0.0143395670177665;
      wq[12] = 0.0143395670177665;
      wq[13] = 0.0143395670177665;
      wq[14] = 0.0143395670177665;
      wq[15] = 0.0143395670177665;
      wq[16] = 0.0250305395686746;
      wq[17] = 0.0250305395686746;
      wq[18] = 0.0250305395686746;
      wq[19] = 0.0250305395686746;
      wq[20] = 0.0250305395686746;
      wq[21] = 0.0250305395686746;
      wq[22] = 0.0479839333057554;
      wq[23] = 0.0479839333057554;
      wq[24] = 0.0479839333057554;
      wq[25] = 0.0479839333057554;
      wq[26] = 0.0479839333057554;
      wq[27] = 0.0479839333057554;
      wq[28] = 0.0479839333057554;
      wq[29] = 0.0479839333057554;
      wq[30] = 0.0479839333057554;
      wq[31] = 0.0479839333057554;
      wq[32] = 0.0479839333057554;
      wq[33] = 0.0479839333057554;
      wq[34] = 0.0931745731195340;
      break;

   /*   case 6 : //  Symmetric rule with nonnegative weights, order 7

      assert(nq == 35);

      a = 1.0/4.0;
	cq0[0] = a;
	cq1[0] = a;
	cq2[0] = a;
	wq[0] = 0.09548528946413084886057843611722638;
	
	ctr = 1;
// S31 symmetry orbit, 4 points
	b = 0.31570114977820279942342999959331149;
	
	cq0[ctr] = b;
	cq0[ctr+1] = 1.0-3*b;
	cq0[ctr+2] = b;
	cq0[ctr+3] = b;

	cq1[ctr] = b;
	cq1[ctr+1] = b;
	cq1[ctr+2] = 1.0-3*b;
	cq1[ctr+3] = b;

	cq2[ctr] = b;	
	cq2[ctr+1] = b;	
	cq2[ctr+2] = b;
	cq2[ctr+3] = 1.0-3*b;
	

	for (int i=0; i<4; i++)
	{
		wq[ctr+i] = 0.04232958120996702907628617079854674;
	}
	ctr = ctr+4;
// S22 symmetry orbit, 6 points
	c = 0.05048982259839636876305382298656247; 
      
      cq0[ctr] = c;
      cq0[ctr+1] = c;
      cq0[ctr+2] = c;
      cq0[ctr+3] = 0.5-c;
      cq0[ctr+4] = 0.5-c;
      cq0[ctr+5] = 0.5-c;

      cq1[ctr] = c;
      cq1[ctr+1] = 0.5-c;
      cq1[ctr+2] = 0.5-c;
      cq1[ctr+3] = c;
      cq1[ctr+4] = 0.5-c;
      cq1[ctr+5] = c;

      cq2[ctr] = 0.5-c;
      cq2[ctr+1] = 0.5-c;
      cq2[ctr+2] = c;
      cq2[ctr+3] = c;
      cq2[ctr+4] = c;
      cq2[ctr+5] = 0.5-c;
	for (int i=0; i<6; i++)
	{
		wq[ctr+i] = 0.03189692783285757993427482408294246;
	}
      ctr = ctr+6;

// 2 S211 symmetry orbits, 12 points each
for (int j=0; j<2; j++){
      if (j==0){
      d = 0.18883383102600104773643110385458576;
      e = 0.57517163758700002348324157702230752;
	}
      if(j==1){
      d	= 0.02126547254148324598883610149981994;
      e = 0.81083024109854856111810537984823239;
	}
      cq0[ctr] = d;
      cq0[ctr+1] = d;
      cq0[ctr+2] = d;
      cq0[ctr+3] = d;
      cq0[ctr+4] = d;
      cq0[ctr+5] = d;
      cq0[ctr+6] = e;
      cq0[ctr+7] = e;
      cq0[ctr+8] = e;
      cq0[ctr+9] = 1.0-2*d-e;
      cq0[ctr+10] = 1.0-2*d-e;
      cq0[ctr+11] = 1.0-2*d-e;

      cq1[ctr] = d;
      cq1[ctr+1] = d;
      cq1[ctr+2] = e;
      cq1[ctr+3] = e;
      cq1[ctr+4] = 1.0-2*d-e;
      cq1[ctr+5] = 1.0-2*d-e;
      cq1[ctr+6] = d;
      cq1[ctr+7] = d;
      cq1[ctr+8] = 1.0-2*d-e;
      cq1[ctr+9] = d;
      cq1[ctr+10] = d;
      cq1[ctr+11] = e;

      cq2[ctr] = e;
      cq2[ctr+1] = 1.0-2*d-e;
      cq2[ctr+2] = d;
      cq2[ctr+3] = 1.0-2*d-e;
      cq2[ctr+4] = d;
      cq2[ctr+5] = e;
      cq2[ctr+6] = d;
      cq2[ctr+7] = 1.0-2*d-e;
      cq2[ctr+8] = d;
      cq2[ctr+9] = d;
      cq2[ctr+10] = e;
      cq2[ctr+11] = d;
	for (int i=0; i<12; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.03720713072833462136961556119148112;
	}
	if(j==1){
		wq[ctr+i] = 0.00811077082990334156610343349109654;
	}
	}
	ctr = ctr+12;
	}
	
      break;
*/
      case 7 : //  Symmetric rule with nonnegative weights, order 8

      assert(nq == 46);  
	
	ctr = 0;
// 4 S31 symmetry orbits, 4 points each
for(int j=0; j<4; j++){
	if(j==0){
	b = 0.03967542307038990126507132953938949;
	}
	if(j==1){
	b = 0.31448780069809631378416056269714830;
	}
	if(j==2){
	b = 0.10198669306270330000000000000000000;
	}
	if(j==3){
	b = 0.18420369694919151227594641734890918;
	}
	cq0[ctr] = b;
	cq0[ctr+1] = 1.0-3*b;
	cq0[ctr+2] = b;
	cq0[ctr+3] = b;

	cq1[ctr] = b;
	cq1[ctr+1] = b;
	cq1[ctr+2] = 1.0-3*b;
	cq1[ctr+3] = b;

	cq2[ctr] = b;	
	cq2[ctr+1] = b;	
	cq2[ctr+2] = b;
	cq2[ctr+3] = 1.0-3*b;
	

	for (int i=0; i<4; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00639714777990232132145142033517302;
	}
	if(j==1){
		wq[ctr+i] = 0.04019044802096617248816115847981783;
	}
	if(j==2){
		wq[ctr+i] = 0.02430797550477032117486910877192260;
	}
	if(j==3){
		wq[ctr+i] = 0.05485889241369744046692412399039144;
	}
	}
	ctr = ctr+4;
}
// S22 symmetry orbit, 6 points
	c = 0.06343628775453989240514123870189827; 
      
      cq0[ctr] = c;
      cq0[ctr+1] = c;
      cq0[ctr+2] = c;
      cq0[ctr+3] = 0.5-c;
      cq0[ctr+4] = 0.5-c;
      cq0[ctr+5] = 0.5-c;

      cq1[ctr] = c;
      cq1[ctr+1] = 0.5-c;
      cq1[ctr+2] = 0.5-c;
      cq1[ctr+3] = c;
      cq1[ctr+4] = 0.5-c;
      cq1[ctr+5] = c;

      cq2[ctr] = 0.5-c;
      cq2[ctr+1] = 0.5-c;
      cq2[ctr+2] = c;
      cq2[ctr+3] = c;
      cq2[ctr+4] = c;
      cq2[ctr+5] = 0.5-c;
	for (int i=0; i<6; i++)
	{
		wq[ctr+i] = 0.03571961223409918246495096899661762;
	}
      ctr = ctr+6;

// 2 S211 symmetry orbits, 12 points each
for (int j=0; j<2; j++){
      if (j==0){
      d = 0.02169016206772800480266248262493018;
      e = 0.71993192203946593588943495335273478;
	}
      if(j==1){
      d	= 0.20448008063679571424133557487274534;
      e = 0.58057719012880922417539817139062041;
	}
      cq0[ctr] = d;
      cq0[ctr+1] = d;
      cq0[ctr+2] = d;
      cq0[ctr+3] = d;
      cq0[ctr+4] = d;
      cq0[ctr+5] = d;
      cq0[ctr+6] = e;
      cq0[ctr+7] = e;
      cq0[ctr+8] = e;
      cq0[ctr+9] = 1.0-2*d-e;
      cq0[ctr+10] = 1.0-2*d-e;
      cq0[ctr+11] = 1.0-2*d-e;

      cq1[ctr] = d;
      cq1[ctr+1] = d;
      cq1[ctr+2] = e;
      cq1[ctr+3] = e;
      cq1[ctr+4] = 1.0-2*d-e;
      cq1[ctr+5] = 1.0-2*d-e;
      cq1[ctr+6] = d;
      cq1[ctr+7] = d;
      cq1[ctr+8] = 1.0-2*d-e;
      cq1[ctr+9] = d;
      cq1[ctr+10] = d;
      cq1[ctr+11] = e;

      cq2[ctr] = e;
      cq2[ctr+1] = 1.0-2*d-e;
      cq2[ctr+2] = d;
      cq2[ctr+3] = 1.0-2*d-e;
      cq2[ctr+4] = d;
      cq2[ctr+5] = e;
      cq2[ctr+6] = d;
      cq2[ctr+7] = 1.0-2*d-e;
      cq2[ctr+8] = d;
      cq2[ctr+9] = d;
      cq2[ctr+10] = e;
      cq2[ctr+11] = d;
	for (int i=0; i<12; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00718319069785253940945110521980376;
	}
	if(j==1){
		wq[ctr+i] = 0.01637218194531911754093813975611913;
	}
	}
	ctr = ctr+12;
	}
	
      break;

    case 8:
      assert(nq == 45);
      //  KEAST_RULE returns the points and weights
      //  of a Keast rule for the triangle.
      //
      //  In this test, we simply print a rule.
      //
      //  Rule =   10
      //  Degree = 8
      //  Order =  10

      wq[0] = -2.35962039847755683519e-01;
      wq[1] = 2.44878963560562282198e-02;
      wq[2] = 2.44878963560562282198e-02;
      wq[3] = 2.44878963560562282198e-02;
      wq[4] = 2.44878963560562282198e-02;
      wq[5] = 3.94852063982605114983e-03;
      wq[6] = 3.94852063982605114983e-03;
      wq[7] = 3.94852063982605114983e-03;
      wq[8] = 3.94852063982605114983e-03;
      wq[9] = 2.63055529507370822184e-02;
      wq[10] = 2.63055529507370822184e-02;
      wq[11] = 2.63055529507370822184e-02;
      wq[12] = 2.63055529507370822184e-02;
      wq[13] = 2.63055529507370822184e-02;
      wq[14] = 2.63055529507370822184e-02;
      wq[15] = 8.29803830550589066606e-02;
      wq[16] = 8.29803830550589066606e-02;
      wq[17] = 8.29803830550589066606e-02;
      wq[18] = 8.29803830550589066606e-02;
      wq[19] = 8.29803830550589066606e-02;
      wq[20] = 8.29803830550589066606e-02;
      wq[21] = 2.54426245481023452499e-02;
      wq[22] = 2.54426245481023452499e-02;
      wq[23] = 2.54426245481023452499e-02;
      wq[24] = 2.54426245481023452499e-02;
      wq[25] = 2.54426245481023452499e-02;
      wq[26] = 2.54426245481023452499e-02;
      wq[27] = 2.54426245481023452499e-02;
      wq[28] = 2.54426245481023452499e-02;
      wq[29] = 2.54426245481023452499e-02;
      wq[30] = 2.54426245481023452499e-02;
      wq[31] = 2.54426245481023452499e-02;
      wq[32] = 2.54426245481023452499e-02;
      wq[33] = 1.34324384376852089262e-02;
      wq[34] = 1.34324384376852089262e-02;
      wq[35] = 1.34324384376852089262e-02;
      wq[36] = 1.34324384376852089262e-02;
      wq[37] = 1.34324384376852089262e-02;
      wq[38] = 1.34324384376852089262e-02;
      wq[39] = 1.34324384376852089262e-02;
      wq[40] = 1.34324384376852089262e-02;
      wq[41] = 1.34324384376852089262e-02;
      wq[42] = 1.34324384376852089262e-02;
      wq[43] = 1.34324384376852089262e-02;
      wq[44] = 1.34324384376852089262e-02;

      cq0[0] = 2.50000000000000000000e-01;
      cq0[1] = 6.17587190300083022088e-01;
      cq0[2] = 1.27470936566639020393e-01;
      cq0[3] = 1.27470936566639020393e-01;
      cq0[4] = 1.27470936566639020393e-01;
      cq0[5] = 9.03763508822103101004e-01;
      cq0[6] = 3.20788303926322973525e-02;
      cq0[7] = 3.20788303926322973525e-02;
      cq0[8] = 3.20788303926322973525e-02;
      cq0[9] = 4.50222904356718967023e-01;
      cq0[10] = 4.97770956432810190995e-02;
      cq0[11] = 4.97770956432810190995e-02;
      cq0[12] = 4.97770956432810190995e-02;
      cq0[13] = 4.50222904356718967023e-01;
      cq0[14] = 4.50222904356718967023e-01;
      cq0[15] = 3.16269552601450065765e-01;
      cq0[16] = 1.83730447398549934235e-01;
      cq0[17] = 1.83730447398549934235e-01;
      cq0[18] = 1.83730447398549934235e-01;
      cq0[19] = 3.16269552601450065765e-01;
      cq0[20] = 3.16269552601450065765e-01;
      cq0[21] = 2.29177878448171175318e-02;
      cq0[22] = 2.31901089397150900195e-01;
      cq0[23] = 2.31901089397150900195e-01;
      cq0[24] = 5.13280033360881127180e-01;
      cq0[25] = 2.31901089397150900195e-01;
      cq0[26] = 2.31901089397150900195e-01;
      cq0[27] = 2.31901089397150900195e-01;
      cq0[28] = 2.29177878448171175318e-02;
      cq0[29] = 5.13280033360881127180e-01;
      cq0[30] = 2.31901089397150900195e-01;
      cq0[31] = 2.29177878448171175318e-02;
      cq0[32] = 5.13280033360881127180e-01;
      cq0[33] = 7.30313427807538384506e-01;
      cq0[34] = 3.79700484718286102037e-02;
      cq0[35] = 3.79700484718286102037e-02;
      cq0[36] = 1.93746475248804395086e-01;
      cq0[37] = 3.79700484718286102037e-02;
      cq0[38] = 3.79700484718286102037e-02;
      cq0[39] = 3.79700484718286102037e-02;
      cq0[40] = 7.30313427807538384506e-01;
      cq0[41] = 1.93746475248804395086e-01;
      cq0[42] = 3.79700484718286102037e-02;
      cq0[43] = 7.30313427807538384506e-01;
      cq0[44] = 1.93746475248804395086e-01;

      cq1[0] = 2.50000000000000000000e-01;
      cq1[1] = 1.27470936566639020393e-01;
      cq1[2] = 1.27470936566639020393e-01;
      cq1[3] = 1.27470936566639020393e-01;
      cq1[4] = 6.17587190300083022088e-01;
      cq1[5] = 3.20788303926322973525e-02;
      cq1[6] = 3.20788303926322973525e-02;
      cq1[7] = 3.20788303926322973525e-02;
      cq1[8] = 9.03763508822103101004e-01;
      cq1[9] = 4.97770956432810190995e-02;
      cq1[10] = 4.50222904356718967023e-01;
      cq1[11] = 4.97770956432810190995e-02;
      cq1[12] = 4.50222904356718967023e-01;
      cq1[13] = 4.97770956432810190995e-02;
      cq1[14] = 4.50222904356718967023e-01;
      cq1[15] = 1.83730447398549934235e-01;
      cq1[16] = 3.16269552601450065765e-01;
      cq1[17] = 1.83730447398549934235e-01;
      cq1[18] = 3.16269552601450065765e-01;
      cq1[19] = 1.83730447398549934235e-01;
      cq1[20] = 3.16269552601450065765e-01;
      cq1[21] = 2.31901089397150900195e-01;
      cq1[22] = 2.29177878448171175318e-02;
      cq1[23] = 2.31901089397150900195e-01;
      cq1[24] = 2.31901089397150900195e-01;
      cq1[25] = 5.13280033360881127180e-01;
      cq1[26] = 2.31901089397150900195e-01;
      cq1[27] = 2.29177878448171175318e-02;
      cq1[28] = 5.13280033360881127180e-01;
      cq1[29] = 2.31901089397150900195e-01;
      cq1[30] = 5.13280033360881127180e-01;
      cq1[31] = 2.31901089397150900195e-01;
      cq1[32] = 2.29177878448171175318e-02;
      cq1[33] = 3.79700484718286102037e-02;
      cq1[34] = 7.30313427807538384506e-01;
      cq1[35] = 3.79700484718286102037e-02;
      cq1[36] = 3.79700484718286102037e-02;
      cq1[37] = 1.93746475248804395086e-01;
      cq1[38] = 3.79700484718286102037e-02;
      cq1[39] = 7.30313427807538384506e-01;
      cq1[40] = 1.93746475248804395086e-01;
      cq1[41] = 3.79700484718286102037e-02;
      cq1[42] = 1.93746475248804395086e-01;
      cq1[43] = 3.79700484718286102037e-02;
      cq1[44] = 7.30313427807538384506e-01;

      cq2[0] = 2.50000000000000000000e-01;
      cq2[1] = 1.27470936566639020393e-01;
      cq2[2] = 1.27470936566639020393e-01;
      cq2[3] = 6.17587190300083022088e-01;
      cq2[4] = 1.27470936566639020393e-01;
      cq2[5] = 3.20788303926322973525e-02;
      cq2[6] = 3.20788303926322973525e-02;
      cq2[7] = 9.03763508822103101004e-01;
      cq2[8] = 3.20788303926322973525e-02;
      cq2[9] = 4.97770956432810190995e-02;
      cq2[10] = 4.97770956432810190995e-02;
      cq2[11] = 4.50222904356718967023e-01;
      cq2[12] = 4.50222904356718967023e-01;
      cq2[13] = 4.50222904356718967023e-01;
      cq2[14] = 4.97770956432810190995e-02;
      cq2[15] = 1.83730447398549934235e-01;
      cq2[16] = 1.83730447398549934235e-01;
      cq2[17] = 3.16269552601450065765e-01;
      cq2[18] = 3.16269552601450065765e-01;
      cq2[19] = 3.16269552601450065765e-01;
      cq2[20] = 1.83730447398549934235e-01;
      cq2[21] = 2.31901089397150900195e-01;
      cq2[22] = 2.31901089397150900195e-01;
      cq2[23] = 2.29177878448171175318e-02;
      cq2[24] = 2.31901089397150900195e-01;
      cq2[25] = 2.31901089397150900195e-01;
      cq2[26] = 5.13280033360881127180e-01;
      cq2[27] = 5.13280033360881127180e-01;
      cq2[28] = 2.31901089397150900195e-01;
      cq2[29] = 2.29177878448171175318e-02;
      cq2[30] = 2.29177878448171175318e-02;
      cq2[31] = 5.13280033360881127180e-01;
      cq2[32] = 2.31901089397150900195e-01;
      cq2[33] = 3.79700484718286102037e-02;
      cq2[34] = 3.79700484718286102037e-02;
      cq2[35] = 7.30313427807538384506e-01;
      cq2[36] = 3.79700484718286102037e-02;
      cq2[37] = 3.79700484718286102037e-02;
      cq2[38] = 1.93746475248804395086e-01;
      cq2[39] = 1.93746475248804395086e-01;
      cq2[40] = 3.79700484718286102037e-02;
      cq2[41] = 7.30313427807538384506e-01;
      cq2[42] = 7.30313427807538384506e-01;
      cq2[43] = 1.93746475248804395086e-01;
      cq2[44] = 3.79700484718286102037e-02;

      break;
/*
       case 8:
      assert(nq == 56);
 //  Symmetric rule with nonnegative weights, 6 layers

      wq[0] = 0.0010373112336140;
      wq[1] = 0.0010373112336140;
      wq[2] = 0.0010373112336140;
      wq[3] = 0.0010373112336140;
      wq[4] = 0.0096016645399480;
      wq[5] = 0.0096016645399480;
      wq[6] = 0.0096016645399480;
      wq[7] = 0.0096016645399480;
      wq[8] = 0.0096016645399480;
      wq[9] = 0.0096016645399480;
      wq[10] = 0.0096016645399480;
      wq[11] = 0.0096016645399480;
      wq[12] = 0.0096016645399480;
      wq[13] = 0.0096016645399480;
      wq[14] = 0.0096016645399480;
      wq[15] = 0.0096016645399480;
      wq[16] = 0.0164493976798232;
      wq[17] = 0.0164493976798232;
      wq[18] = 0.0164493976798232;
      wq[19] = 0.0164493976798232;
      wq[20] = 0.0164493976798232;
      wq[21] = 0.0164493976798232;
      wq[22] = 0.0164493976798232;
      wq[23] = 0.0164493976798232;
      wq[24] = 0.0164493976798232;
      wq[25] = 0.0164493976798232;
      wq[26] = 0.0164493976798232;
      wq[27] = 0.0164493976798232;
      wq[28] = 0.0153747766513310;
      wq[29] = 0.0153747766513310;
      wq[30] = 0.0153747766513310;
      wq[31] = 0.0153747766513310;
      wq[32] = 0.0153747766513310;
      wq[33] = 0.0153747766513310;
      wq[34] = 0.0153747766513310;
      wq[35] = 0.0153747766513310;
      wq[36] = 0.0153747766513310;
      wq[37] = 0.0153747766513310;
      wq[38] = 0.0153747766513310;
      wq[39] = 0.0153747766513310;
      wq[40] = 0.0293520118375230;
      wq[41] = 0.0293520118375230;
      wq[42] = 0.0293520118375230;
      wq[43] = 0.0293520118375230;
      wq[44] = 0.0293520118375230;
      wq[45] = 0.0293520118375230;
      wq[46] = 0.0293520118375230;
      wq[47] = 0.0293520118375230;
      wq[48] = 0.0293520118375230;
      wq[49] = 0.0293520118375230;
      wq[50] = 0.0293520118375230;
      wq[51] = 0.0293520118375230;
      wq[52] = 0.0366291366405108;
      wq[53] = 0.0366291366405108;
      wq[54] = 0.0366291366405108;
      wq[55] = 0.0366291366405108;

      cq0[0] = 0.9551438045408220;
      cq0[1] = 0.0149520651530592;
      cq0[2] = 0.0149520651530592;
      cq0[3] = 0.0149520651530592;
      cq0[4] = 0.7799760084415400;
      cq0[5] = 0.1518319491659370;
      cq0[6] = 0.7799760084415400;
      cq0[7] = 0.1518319491659370;
      cq0[8] = 0.7799760084415400;
      cq0[9] = 0.1518319491659370;
      cq0[10] = 0.0340960211962615;
      cq0[11] = 0.0340960211962615;
      cq0[12] = 0.0340960211962615;
      cq0[13] = 0.0340960211962615;
      cq0[14] = 0.0340960211962615;
      cq0[15] = 0.0340960211962615;
      cq0[16] = 0.3549340560639790;
      cq0[17] = 0.5526556431060170;
      cq0[18] = 0.3549340560639790;
      cq0[19] = 0.5526556431060170;
      cq0[20] = 0.3549340560639790;
      cq0[21] = 0.5526556431060170;
      cq0[22] = 0.0462051504150017;
      cq0[23] = 0.0462051504150017;
      cq0[24] = 0.0462051504150017;
      cq0[25] = 0.0462051504150017;
      cq0[26] = 0.0462051504150017;
      cq0[27] = 0.0462051504150017;
      cq0[28] = 0.5381043228880020;
      cq0[29] = 0.2281904610687610;
      cq0[30] = 0.2281904610687610;
      cq0[31] = 0.5381043228880020;
      cq0[32] = 0.2281904610687610;
      cq0[33] = 0.2281904610687610;
      cq0[34] = 0.5381043228880020;
      cq0[35] = 0.2281904610687610;
      cq0[36] = 0.2281904610687610;
      cq0[37] = 0.0055147549744775;
      cq0[38] = 0.0055147549744775;
      cq0[39] = 0.0055147549744775;
      cq0[40] = 0.1961837595745600;
      cq0[41] = 0.3523052600879940;
      cq0[42] = 0.3523052600879940;
      cq0[43] = 0.1961837595745600;
      cq0[44] = 0.3523052600879940;
      cq0[45] = 0.3523052600879940;
      cq0[46] = 0.1961837595745600;
      cq0[47] = 0.3523052600879940;
      cq0[48] = 0.3523052600879940;
      cq0[49] = 0.0992057202494530;
      cq0[50] = 0.0992057202494530;
      cq0[51] = 0.0992057202494530;
      cq0[52] = 0.5965649956210170;
      cq0[53] = 0.1344783347929940;
      cq0[54] = 0.1344783347929940;
      cq0[55] = 0.1344783347929940;

      cq1[0] = 0.0149520651530592;
      cq1[1] = 0.9551438045408220;
      cq1[2] = 0.0149520651530592;
      cq1[3] = 0.0149520651530592;
      cq1[4] = 0.1518319491659370;
      cq1[5] = 0.7799760084415400;
      cq1[6] = 0.0340960211962615;
      cq1[7] = 0.0340960211962615;
      cq1[8] = 0.0340960211962615;
      cq1[9] = 0.0340960211962615;
      cq1[10] = 0.7799760084415400;
      cq1[11] = 0.1518319491659370;
      cq1[12] = 0.7799760084415400;
      cq1[13] = 0.1518319491659370;
      cq1[14] = 0.0340960211962615;
      cq1[15] = 0.0340960211962615;
      cq1[16] = 0.5526556431060170;
      cq1[17] = 0.3549340560639790;
      cq1[18] = 0.0462051504150017;
      cq1[19] = 0.0462051504150017;
      cq1[20] = 0.0462051504150017;
      cq1[21] = 0.0462051504150017;
      cq1[22] = 0.3549340560639790;
      cq1[23] = 0.5526556431060170;
      cq1[24] = 0.3549340560639790;
      cq1[25] = 0.5526556431060170;
      cq1[26] = 0.0462051504150017;
      cq1[27] = 0.0462051504150017;
      cq1[28] = 0.2281904610687610;
      cq1[29] = 0.5381043228880020;
      cq1[30] = 0.2281904610687610;
      cq1[31] = 0.2281904610687610;
      cq1[32] = 0.5381043228880020;
      cq1[33] = 0.2281904610687610;
      cq1[34] = 0.0055147549744775;
      cq1[35] = 0.0055147549744775;
      cq1[36] = 0.0055147549744775;
      cq1[37] = 0.5381043228880020;
      cq1[38] = 0.2281904610687610;
      cq1[39] = 0.2281904610687610;
      cq1[40] = 0.3523052600879940;
      cq1[41] = 0.1961837595745600;
      cq1[42] = 0.3523052600879940;
      cq1[43] = 0.3523052600879940;
      cq1[44] = 0.1961837595745600;
      cq1[45] = 0.3523052600879940;
      cq1[46] = 0.0992057202494530;
      cq1[47] = 0.0992057202494530;
      cq1[48] = 0.0992057202494530;
      cq1[49] = 0.1961837595745600;
      cq1[50] = 0.3523052600879940;
      cq1[51] = 0.3523052600879940;
      cq1[52] = 0.1344783347929940;
      cq1[53] = 0.5965649956210170;
      cq1[54] = 0.1344783347929940;
      cq1[55] = 0.1344783347929940;

      cq2[0] = 0.0149520651530592;
      cq2[1] = 0.0149520651530592;
      cq2[2] = 0.9551438045408220;
      cq2[3] = 0.0149520651530592;
      cq2[4] = 0.0340960211962615;
      cq2[5] = 0.0340960211962615;
      cq2[6] = 0.1518319491659370;
      cq2[7] = 0.7799760084415400;
      cq2[8] = 0.0340960211962615;
      cq2[9] = 0.0340960211962615;
      cq2[10] = 0.1518319491659370;
      cq2[11] = 0.7799760084415400;
      cq2[12] = 0.0340960211962615;
      cq2[13] = 0.0340960211962615;
      cq2[14] = 0.7799760084415400;
      cq2[15] = 0.1518319491659370;
      cq2[16] = 0.0462051504150017;
      cq2[17] = 0.0462051504150017;
      cq2[18] = 0.5526556431060170;
      cq2[19] = 0.3549340560639790;
      cq2[20] = 0.0462051504150017;
      cq2[21] = 0.0462051504150017;
      cq2[22] = 0.5526556431060170;
      cq2[23] = 0.3549340560639790;
      cq2[24] = 0.0462051504150017;
      cq2[25] = 0.0462051504150017;
      cq2[26] = 0.3549340560639790;
      cq2[27] = 0.5526556431060170;
      cq2[28] = 0.2281904610687610;
      cq2[29] = 0.2281904610687610;
      cq2[30] = 0.5381043228880020;
      cq2[31] = 0.0055147549744775;
      cq2[32] = 0.0055147549744775;
      cq2[33] = 0.0055147549744775;
      cq2[34] = 0.2281904610687610;
      cq2[35] = 0.5381043228880020;
      cq2[36] = 0.2281904610687610;
      cq2[37] = 0.2281904610687610;
      cq2[38] = 0.5381043228880020;
      cq2[39] = 0.2281904610687610;
      cq2[40] = 0.3523052600879940;
      cq2[41] = 0.3523052600879940;
      cq2[42] = 0.1961837595745600;
      cq2[43] = 0.0992057202494530;
      cq2[44] = 0.0992057202494530;
      cq2[45] = 0.0992057202494530;
      cq2[46] = 0.3523052600879940;
      cq2[47] = 0.1961837595745600;
      cq2[48] = 0.3523052600879940;
      cq2[49] = 0.3523052600879940;
      cq2[50] = 0.1961837595745600;
      cq2[51] = 0.3523052600879940;
      cq2[52] = 0.1344783347929940;
      cq2[53] = 0.1344783347929940;
      cq2[54] = 0.5965649956210170;
      cq2[55] = 0.1344783347929940;
      
	break;*/

/*
      case 8 : //  Symmetric rule with nonnegative weights, order 9

      assert(nq == 59);  

      a = 1.0/4.0;
	cq0[0] = a;
	cq1[0] = a;
	cq2[0] = a;
	wq[0] = 0.09548528946413084886057843611722638;
	
	ctr = 1;
// 4 S31 symmetry orbits, 4 points each
for(int j=0; j<4; j++){
	if(j==0){
	b = 0.03785502061999503609086515586175707;
	}
	if(j==1){
	b = 0.16954439965012220000000000000000000;
	}
	if(j==2){
	b = 0.05484140424416689000000000000000000;
	}
	if(j==3){
	b = 0.32229717190921058836777748445908171;
	}
	cq0[ctr] = b;
	cq0[ctr+1] = 1.0-3*b;
	cq0[ctr+2] = b;
	cq0[ctr+3] = b;

	cq1[ctr] = b;
	cq1[ctr+1] = b;
	cq1[ctr+2] = 1.0-3*b;
	cq1[ctr+3] = b;

	cq2[ctr] = b;	
	cq2[ctr+1] = b;	
	cq2[ctr+2] = b;
	cq2[ctr+3] = 1.0-3*b;
	

	for (int i=0; i<4; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00421825735654367356185795185819147;
	}
	if(j==1){
		wq[ctr+i] = 0.02348412311384798927791501022996111;
	}
	if(j==2){
		wq[ctr+i] = 0.00421283454980389148648831814037819;
	}
	if(j==3){
		wq[ctr+i] = 0.02994712640542812769203037546126163;
	}
	}
	ctr = ctr+4;
}
// S22 symmetry orbit, 6 points
	c = 0.10961777508972033704050355954365052; 
      
      cq0[ctr] = c;
      cq0[ctr+1] = c;
      cq0[ctr+2] = c;
      cq0[ctr+3] = 0.5-c;
      cq0[ctr+4] = 0.5-c;
      cq0[ctr+5] = 0.5-c;

      cq1[ctr] = c;
      cq1[ctr+1] = 0.5-c;
      cq1[ctr+2] = 0.5-c;
      cq1[ctr+3] = c;
      cq1[ctr+4] = 0.5-c;
      cq1[ctr+5] = c;

      cq2[ctr] = 0.5-c;
      cq2[ctr+1] = 0.5-c;
      cq2[ctr+2] = c;
      cq2[ctr+3] = c;
      cq2[ctr+4] = c;
      cq2[ctr+5] = 0.5-c;
	for (int i=0; i<6; i++)
	{
		wq[ctr+i] = 0.03695441750679136335292416138761121;
	}
      ctr = ctr+6;

// 3 S211 symmetry orbits, 12 points each
for (int j=0; j<3; j++){
      if (j==0){
      d = 0.45915766038590539763886410168178216;
      e = 0.08004485927247373376034330857923567;
	}
      if(j==1){
      d	= 0.03296694775357210169727386483414899;
      e = 0.71879584022434055051132299796383374;
	}
      if(j==2){
      d	= 0.18174359672117481549870278661377760;
      e = 0.60023700739524674102301240348069459;
	}
      cq0[ctr] = d;
      cq0[ctr+1] = d;
      cq0[ctr+2] = d;
      cq0[ctr+3] = d;
      cq0[ctr+4] = d;
      cq0[ctr+5] = d;
      cq0[ctr+6] = e;
      cq0[ctr+7] = e;
      cq0[ctr+8] = e;
      cq0[ctr+9] = 1.0-2*d-e;
      cq0[ctr+10] = 1.0-2*d-e;
      cq0[ctr+11] = 1.0-2*d-e;

      cq1[ctr] = d;
      cq1[ctr+1] = d;
      cq1[ctr+2] = e;
      cq1[ctr+3] = e;
      cq1[ctr+4] = 1.0-2*d-e;
      cq1[ctr+5] = 1.0-2*d-e;
      cq1[ctr+6] = d;
      cq1[ctr+7] = d;
      cq1[ctr+8] = 1.0-2*d-e;
      cq1[ctr+9] = d;
      cq1[ctr+10] = d;
      cq1[ctr+11] = e;

      cq2[ctr] = e;
      cq2[ctr+1] = 1.0-2*d-e;
      cq2[ctr+2] = d;
      cq2[ctr+3] = 1.0-2*d-e;
      cq2[ctr+4] = d;
      cq2[ctr+5] = e;
      cq2[ctr+6] = d;
      cq2[ctr+7] = 1.0-2*d-e;
      cq2[ctr+8] = d;
      cq2[ctr+9] = d;
      cq2[ctr+10] = e;
      cq2[ctr+11] = d;
	for (int i=0; i<12; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00817349224171051348425319650294732;
	}
	if(j==1){
		wq[ctr+i] = 0.00987978656102278957913113314297149;
	}
	if(j==2){
		wq[ctr+i] = 0.02160718741919244401497646690335203;
	}
	}
	ctr = ctr+12;
	}
	
      break; */
      case 9 : //  Symmetric rule with nonnegative weights, order 10

      assert(nq == 79);  

      a = 1.0/4.0;
	cq0[0] = a;
	cq1[0] = a;
	cq2[0] = a;
	wq[0] = 0.04574189830483037077884770618329337;
	
	ctr = 1;
// 3 S31 symmetry orbits, 4 points each
for(int j=0; j<3; j++){
	if(j==0){
	b = 0.11425191803006935688146412277598412;
	}
	if(j==1){
	b = 0.01063790234539248531264164411274776;
	}
	if(j==2){
	b = 0.31274070833535645859816704980806110;
	}

	cq0[ctr] = b;
	cq0[ctr+1] = 1.0-3*b;
	cq0[ctr+2] = b;
	cq0[ctr+3] = b;

	cq1[ctr] = b;
	cq1[ctr+1] = b;
	cq1[ctr+2] = 1.0-3*b;
	cq1[ctr+3] = b;

	cq2[ctr] = b;	
	cq2[ctr+1] = b;	
	cq2[ctr+2] = b;
	cq2[ctr+3] = 1.0-3*b;
	

	for (int i=0; i<4; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.01092727610912416907498417206565671;
	}
	if(j==1){
		wq[ctr+i] = 0.00055352334192264689534558564012282;
	}
	if(j==2){
		wq[ctr+i] = 0.02569337913913269580782688316792080;
	}
	}
	ctr = ctr+4;
}
// S22 symmetry orbit, 6 points
	c = 0.01631296303281644000000000000000000; 
      
      cq0[ctr] = c;
      cq0[ctr+1] = c;
      cq0[ctr+2] = c;
      cq0[ctr+3] = 0.5-c;
      cq0[ctr+4] = 0.5-c;
      cq0[ctr+5] = 0.5-c;

      cq1[ctr] = c;
      cq1[ctr+1] = 0.5-c;
      cq1[ctr+2] = 0.5-c;
      cq1[ctr+3] = c;
      cq1[ctr+4] = 0.5-c;
      cq1[ctr+5] = c;

      cq2[ctr] = 0.5-c;
      cq2[ctr+1] = 0.5-c;
      cq2[ctr+2] = c;
      cq2[ctr+3] = c;
      cq2[ctr+4] = c;
      cq2[ctr+5] = 0.5-c;
	for (int i=0; i<6; i++)
	{
		wq[ctr+i] = 0.00055387649657283109312967562590035;
	}
      ctr = ctr+6;

// 5 S211 symmetry orbits, 12 points each
for (int j=0; j<5; j++){
      if (j==0){
      d = 0.03430622963180452385835196582344460;
      e = 0.59830121060139461905983787517050400;
	}
      if(j==1){
      d	= 0.12346418534551115945916818783743644;
      e = 0.47120066204746310257913700590727081;
	}
      if(j==2){
      d	= 0.40991962933181117418479812480531207;
      e = 0.16546413290740130923509687990363569;
	}
      if(j==3){
      d	= 0.17397243903011716743177479785668929;
      e = 0.62916375300275643773181882027844514;
	}
      if(j==4){
      d	= 0.03002157005631784150255786784038011;
      e = 0.81213056814351208262160080755918730;
	}
      cq0[ctr] = d;
      cq0[ctr+1] = d;
      cq0[ctr+2] = d;
      cq0[ctr+3] = d;
      cq0[ctr+4] = d;
      cq0[ctr+5] = d;
      cq0[ctr+6] = e;
      cq0[ctr+7] = e;
      cq0[ctr+8] = e;
      cq0[ctr+9] = 1.0-2*d-e;
      cq0[ctr+10] = 1.0-2*d-e;
      cq0[ctr+11] = 1.0-2*d-e;

      cq1[ctr] = d;
      cq1[ctr+1] = d;
      cq1[ctr+2] = e;
      cq1[ctr+3] = e;
      cq1[ctr+4] = 1.0-2*d-e;
      cq1[ctr+5] = 1.0-2*d-e;
      cq1[ctr+6] = d;
      cq1[ctr+7] = d;
      cq1[ctr+8] = 1.0-2*d-e;
      cq1[ctr+9] = d;
      cq1[ctr+10] = d;
      cq1[ctr+11] = e;

      cq2[ctr] = e;
      cq2[ctr+1] = 1.0-2*d-e;
      cq2[ctr+2] = d;
      cq2[ctr+3] = 1.0-2*d-e;
      cq2[ctr+4] = d;
      cq2[ctr+5] = e;
      cq2[ctr+6] = d;
      cq2[ctr+7] = 1.0-2*d-e;
      cq2[ctr+8] = d;
      cq2[ctr+9] = d;
      cq2[ctr+10] = e;
      cq2[ctr+11] = d;
	for (int i=0; i<12; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.01044842402938294329072628200105773;
	}
	if(j==1){
		wq[ctr+i] = 0.02513844602651287118280517785487423;
	}
	if(j==2){
		wq[ctr+i] = 0.01178620679249594711782155323755017;
	}
	if(j==3){
		wq[ctr+i] = 0.01332022473886650471019828463616468;
	}
	if(j==4){
		wq[ctr+i] = 0.00615987577565961666092767531756180;
	}
	}
	ctr = ctr+12;
	}
	
      break;
      case 10 : //  Symmetric rule with nonnegative weights, order 11

      assert(nq == 96);  

	ctr = 0;
// 6 S31 symmetry orbits, 4 points each
for(int j=0; j<6; j++){
	if(j==0){
	b = 0.12460560449278830000000000000000000;
	}
	if(j==1){
	b = 0.02609630765687464746851542316261877;
	}
	if(j==2){
	b = 0.07193883255798884087330011042809557;
	}
	if(j==3){
	b = 0.32611122454203676937273102302894204;
	}
	if(j==4){
	b = 0.29405882789858127213310307732130217;
	}
	if(j==5){
	b = 0.19271399104965490000000000000000000;
	}

	cq0[ctr] = b;
	cq0[ctr+1] = 1.0-3*b;
	cq0[ctr+2] = b;
	cq0[ctr+3] = b;

	cq1[ctr] = b;
	cq1[ctr+1] = b;
	cq1[ctr+2] = 1.0-3*b;
	cq1[ctr+3] = b;

	cq2[ctr] = b;	
	cq2[ctr+1] = b;	
	cq2[ctr+2] = b;
	cq2[ctr+3] = 1.0-3*b;
	

	for (int i=0; i<4; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.01612698613577620369120244222737879;
	}
	if(j==1){
		wq[ctr+i] = 0.00178872341812357138976990346996962;
	}
	if(j==2){
		wq[ctr+i] = 0.00847529348343123401863799968389086;
	}
	if(j==3){
		wq[ctr+i] = 0.01238021263944669050859562763135516;
	}
	if(j==4){
		wq[ctr+i] = 0.02205586697199415746140963638568037;
	}
	if(j==5){
		wq[ctr+i] = 0.02295765467664274421265594265203307;
	}
	}
	ctr = ctr+4;
}
// 2 S22 symmetry orbit, 6 points each

for(int j=0; j<2; j++){
	if(j==0){
	c = 0.00047127204692773946587837159205225; 
        }
	if(j==1){
	c = 0.10321360207480949336085123341390539; 
	}
      cq0[ctr] = c;
      cq0[ctr+1] = c;
      cq0[ctr+2] = c;
      cq0[ctr+3] = 0.5-c;
      cq0[ctr+4] = 0.5-c;
      cq0[ctr+5] = 0.5-c;

      cq1[ctr] = c;
      cq1[ctr+1] = 0.5-c;
      cq1[ctr+2] = 0.5-c;
      cq1[ctr+3] = c;
      cq1[ctr+4] = 0.5-c;
      cq1[ctr+5] = c;

      cq2[ctr] = 0.5-c;
      cq2[ctr+1] = 0.5-c;
      cq2[ctr+2] = c;
      cq2[ctr+3] = c;
      cq2[ctr+4] = c;
      cq2[ctr+5] = 0.5-c;
	for (int i=0; i<6; i++)
	{
		if(j==0){
		wq[ctr+i] = 0.00120553827014535727045055662252294;
		}
		if(j==1){
		wq[ctr+i] = 0.02479381575164443454447803302296997;
		}
	}
      ctr = ctr+6;
}
// 5 S211 symmetry orbits, 12 points each
for (int j=0; j<5; j++){
      if (j==0){
      d = 0.04349989920159741251267172033621503;
      e = 0.63045319723555591476353398203997141;
	}
      if(j==1){
      d	= 0.01414839289422299290755441603794058;
      e = 0.82491678632147090000000000000000000;
	}
      if(j==2){
      d	= 0.21646077368258425486341884576246642;
      e = 0.52711130286496480000000000000000000;
	}
      if(j==3){
      d	= 0.13301884366834711587538262083530116;
      e = 0.73318551371398651551736762818473584;
	}
      if(j==4){
      d	= 0.44054756810613723082959230959880706;
      e = 0.11506799584377921703650823955291194;
	}
      cq0[ctr] = d;
      cq0[ctr+1] = d;
      cq0[ctr+2] = d;
      cq0[ctr+3] = d;
      cq0[ctr+4] = d;
      cq0[ctr+5] = d;
      cq0[ctr+6] = e;
      cq0[ctr+7] = e;
      cq0[ctr+8] = e;
      cq0[ctr+9] = 1.0-2*d-e;
      cq0[ctr+10] = 1.0-2*d-e;
      cq0[ctr+11] = 1.0-2*d-e;

      cq1[ctr] = d;
      cq1[ctr+1] = d;
      cq1[ctr+2] = e;
      cq1[ctr+3] = e;
      cq1[ctr+4] = 1.0-2*d-e;
      cq1[ctr+5] = 1.0-2*d-e;
      cq1[ctr+6] = d;
      cq1[ctr+7] = d;
      cq1[ctr+8] = 1.0-2*d-e;
      cq1[ctr+9] = d;
      cq1[ctr+10] = d;
      cq1[ctr+11] = e;

      cq2[ctr] = e;
      cq2[ctr+1] = 1.0-2*d-e;
      cq2[ctr+2] = d;
      cq2[ctr+3] = 1.0-2*d-e;
      cq2[ctr+4] = d;
      cq2[ctr+5] = e;
      cq2[ctr+6] = d;
      cq2[ctr+7] = 1.0-2*d-e;
      cq2[ctr+8] = d;
      cq2[ctr+9] = d;
      cq2[ctr+10] = e;
      cq2[ctr+11] = d;
	for (int i=0; i<12; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.01203878836480353606935457416590660;
	}
	if(j==1){
		wq[ctr+i] = 0.00189370204498242146248858917618493;
	}
	if(j==2){
		wq[ctr+i] = 0.01838752922255814184581020943433469;
	}
	if(j==3){
		wq[ctr+i] = 0.00375249249801662461193260176157591;
	}
	if(j==4){
		wq[ctr+i] = 0.00633289841693951300885921328914879;
	}
	}
	ctr = ctr+12;
	}
	
      break;
      case 11 : //  Symmetric rule with nonnegative weights, order 12

      assert(nq == 127);
	a = 1.0/4.0;  
	cq0[0] = a;
	cq1[0] = a;
	cq2[0] = a;
	wq[0] = 0.02340581914868067999082580773836836;

	ctr = 1;
// 6 S31 symmetry orbits, 4 points each
for(int j=0; j<6; j++){
	if(j==0){
	b = 0.19318721110347230000000000000000000;
	}
	if(j==1){
	b = 0.01811701371436566878506928822499717;
	}
	if(j==2){
	b = 0.10700751831426066518406159227423033;
	}
	if(j==3){
	b = 0.29936173715970702940603127680004538;
	}
	if(j==4){
	b = 0.33333033333333333042835213613025030;
	}
	if(j==5){
	b = 0.16575369007421640000000000000000000;
	}

	cq0[ctr] = b;
	cq0[ctr+1] = 1.0-3*b;
	cq0[ctr+2] = b;
	cq0[ctr+3] = b;

	cq1[ctr] = b;
	cq1[ctr+1] = b;
	cq1[ctr+2] = 1.0-3*b;
	cq1[ctr+3] = b;

	cq2[ctr] = b;	
	cq2[ctr+1] = b;	
	cq2[ctr+2] = b;
	cq2[ctr+3] = 1.0-3*b;
	

	for (int i=0; i<4; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00484469946470415656870798306091558;
	}
	if(j==1){
		wq[ctr+i] = 0.00079865303812732982185563521014343;
	}
	if(j==2){
		wq[ctr+i] = 0.01311872008808756207964488505025527;
	}
	if(j==3){
		wq[ctr+i] = 0.02352182961292765917274505054313770;
	}
	if(j==4){
		wq[ctr+i] = 0.00210860882494149803857437048649497;
	}
	if(j==5){
		wq[ctr+i] = 0.00047839298963616600187228601742259;
	}
	}
	ctr = ctr+4;
}
// S22 symmetry orbit, 6 points 

for(int j=0; j<1; j++){
	if(j==0){
	c = 0.04009986052352575650366980228640728; 
        }
      cq0[ctr] = c;
      cq0[ctr+1] = c;
      cq0[ctr+2] = c;
      cq0[ctr+3] = 0.5-c;
      cq0[ctr+4] = 0.5-c;
      cq0[ctr+5] = 0.5-c;

      cq1[ctr] = c;
      cq1[ctr+1] = 0.5-c;
      cq1[ctr+2] = 0.5-c;
      cq1[ctr+3] = c;
      cq1[ctr+4] = 0.5-c;
      cq1[ctr+5] = c;

      cq2[ctr] = 0.5-c;
      cq2[ctr+1] = 0.5-c;
      cq2[ctr+2] = c;
      cq2[ctr+3] = c;
      cq2[ctr+4] = c;
      cq2[ctr+5] = 0.5-c;
	for (int i=0; i<6; i++)
	{
		if(j==0){
		wq[ctr+i] = 0.00204546234216855322941711800170502;
		}
	}
      ctr = ctr+6;
}
// 6 S211 symmetry orbits, 12 points each
for (int j=0; j<6; j++){
      if (j==0){
      d = 0.01951844463761131301132122485607343;
      e = 0.59982639757597731668263005976738196;
	}
      if(j==1){
      d	= 0.24970741896308715787490891769354198;
      e = 0.47400425629911050000000000000000000;
	}
      if(j==2){
      d	= 0.07674205857869954726322831328843659;
      e = 0.83056291375422969598432041821082569;
	}
      if(j==3){
      d	= 0.43011409627915217536723647418133112;
      e = 0.02265922072588833582931396831630072;
	}
      if(j==4){
      d	= 0.12197854304894211937147375564906792;
      e = 0.47765370899783134571567376444973682;
	}
      if(j==5){
      d	= 0.01480482319031682427540691439704854;
      e = 0.81083799468092699988474915243749073;
	}
      cq0[ctr] = d;
      cq0[ctr+1] = d;
      cq0[ctr+2] = d;
      cq0[ctr+3] = d;
      cq0[ctr+4] = d;
      cq0[ctr+5] = d;
      cq0[ctr+6] = e;
      cq0[ctr+7] = e;
      cq0[ctr+8] = e;
      cq0[ctr+9] = 1.0-2*d-e;
      cq0[ctr+10] = 1.0-2*d-e;
      cq0[ctr+11] = 1.0-2*d-e;

      cq1[ctr] = d;
      cq1[ctr+1] = d;
      cq1[ctr+2] = e;
      cq1[ctr+3] = e;
      cq1[ctr+4] = 1.0-2*d-e;
      cq1[ctr+5] = 1.0-2*d-e;
      cq1[ctr+6] = d;
      cq1[ctr+7] = d;
      cq1[ctr+8] = 1.0-2*d-e;
      cq1[ctr+9] = d;
      cq1[ctr+10] = d;
      cq1[ctr+11] = e;

      cq2[ctr] = e;
      cq2[ctr+1] = 1.0-2*d-e;
      cq2[ctr+2] = d;
      cq2[ctr+3] = 1.0-2*d-e;
      cq2[ctr+4] = d;
      cq2[ctr+5] = e;
      cq2[ctr+6] = d;
      cq2[ctr+7] = 1.0-2*d-e;
      cq2[ctr+8] = d;
      cq2[ctr+9] = d;
      cq2[ctr+10] = e;
      cq2[ctr+11] = d;
	for (int i=0; i<12; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00334576331671817115245418532677178;
	}
	if(j==1){
		wq[ctr+i] = 0.01181044822479275264785338274950585;
	}
	if(j==2){
		wq[ctr+i] = 0.00290156990282342152841364375092118;
	}
	if(j==3){
		wq[ctr+i] = 0.00949250645501753676094846901252898;
	}
	if(j==4){
		wq[ctr+i] = 0.02094018358085748583183796760479700;
	}
	if(j==5){
		wq[ctr+i] = 0.00171435866337409051521874943702732;
	}
	}
	ctr = ctr+12;
	}
// S111 symmetry orbit, 24 points each
for(int j=0; j<1; j++){
	if(j==0){
	f = 0.65250697573013212016385330106711095;
	g = 0.22646235632397177636617160407210034;
	h = 0.02251830769546778956654013747639605;
	}
	cq0[ctr] = f;
	cq0[ctr+1] = f;
	cq0[ctr+2] = f;
	cq0[ctr+3] = f;
	cq0[ctr+4] = f;
	cq0[ctr+5] = f;
	cq0[ctr+6] = g;
	cq0[ctr+7] = g;
	cq0[ctr+8] = g;
	cq0[ctr+9] = g;
	cq0[ctr+10] = g;
	cq0[ctr+11] = g;
	cq0[ctr+12] = h;
	cq0[ctr+13] = h;
	cq0[ctr+14] = h;
	cq0[ctr+15] = h; 
	cq0[ctr+16] = h;
	cq0[ctr+17] = h;
	cq0[ctr+18] = 1.0-f-g-h;
	cq0[ctr+19] = 1.0-f-g-h;
	cq0[ctr+20] = 1.0-f-g-h;
	cq0[ctr+21] = 1.0-f-g-h;
	cq0[ctr+22] = 1.0-f-g-h;
	cq0[ctr+23] = 1.0-f-g-h;

	cq1[ctr] = g;
	cq1[ctr+1] = g;
	cq1[ctr+2] = h;
	cq1[ctr+3] = h;
	cq1[ctr+4] = 1.0-f-g-h;
	cq1[ctr+5] = 1.0-f-g-h;
	cq1[ctr+6] = f;
	cq1[ctr+7] = f;
	cq1[ctr+8] = h;
	cq1[ctr+9] = h;
	cq1[ctr+10] = 1.0-f-g-h;
	cq1[ctr+11] = 1.0-f-g-h;
	cq1[ctr+12] = f;
	cq1[ctr+13] = f;
	cq1[ctr+14] = g;
	cq1[ctr+15] = g; 
	cq1[ctr+16] = 1.0-f-g-h;
	cq1[ctr+17] = 1.0-f-g-h;
	cq1[ctr+18] = f;
	cq1[ctr+19] = f;
	cq1[ctr+20] = g;
	cq1[ctr+21] = g;
	cq1[ctr+22] = h;
	cq1[ctr+23] = h;

	cq2[ctr] = h;
	cq2[ctr+1] = 1.0-f-g-h;
	cq2[ctr+2] = g;
	cq2[ctr+3] = 1.0-f-g-h;
	cq2[ctr+4] = g;
	cq2[ctr+5] = h;
	cq2[ctr+6] = h;
	cq2[ctr+7] = 1.0-f-g-h;
	cq2[ctr+8] = 1.0-f-g-h;
	cq2[ctr+9] = f;
	cq2[ctr+10] = h;
	cq2[ctr+11] = f;
	cq2[ctr+12] = g;
	cq2[ctr+13] = 1.0-f-g-h;
	cq2[ctr+14] = f;
	cq2[ctr+15] = 1.0-f-g-h; 
	cq2[ctr+16] = f;
	cq2[ctr+17] = g;
	cq2[ctr+18] = g;
	cq2[ctr+19] = h;
	cq2[ctr+20] = f;
	cq2[ctr+21] = h;
	cq2[ctr+22] = g;
	cq2[ctr+23] = f;

	for(int i=0; i<24; i++){
	if(j==0){
	wq[ctr+i] = 0.00759915954173370886076474450830409;
	}	
	}
ctr = ctr+24;
}
      break;
      case 12 : //  Symmetric rule with nonnegative weights, order 13

      assert(nq == 149);
	a = 1.0/4.0;  
	cq0[0] = a;
	cq1[0] = a;
	cq2[0] = a;
	wq[0] = 0.02191579945212728678229670892998658;

	ctr = 1;
// 4 S31 symmetry orbits, 4 points each
for(int j=0; j<4; j++){
	if(j==0){
	b = 0.09935339765028269917868020572165369;
	}
	if(j==1){
	b = 0.02361873260499568532036302265004401;
	}
	if(j==2){
	b = 0.30089166537572662790706731844610997;
	}
	if(j==3){
	b = 0.18156624280757148139366685840064601;
	}

	cq0[ctr] = b;
	cq0[ctr+1] = 1.0-3*b;
	cq0[ctr+2] = b;
	cq0[ctr+3] = b;

	cq1[ctr] = b;
	cq1[ctr+1] = b;
	cq1[ctr+2] = 1.0-3*b;
	cq1[ctr+3] = b;

	cq2[ctr] = b;	
	cq2[ctr+1] = b;	
	cq2[ctr+2] = b;
	cq2[ctr+3] = 1.0-3*b;
	

	for (int i=0; i<4; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00809592740005652573580359966615063;
	}
	if(j==1){
		wq[ctr+i] = 0.00130319185047278813746994806952476;
	}
	if(j==2){
		wq[ctr+i] = 0.01996610676014222116016391561580003;
	}
	if(j==3){
		wq[ctr+i] = 0.02125705756007566772097136088386650;
	}
	}
	ctr = ctr+4;
}
// 2 S22 symmetry orbits, 6 points each 

for(int j=0; j<2; j++){
	if(j==0){
	c = 0.00428160639152879988718710754508354; 
        }
	if(j==1){
	c = 0.12290357421888442998582785890620434; 
        }
      cq0[ctr] = c;
      cq0[ctr+1] = c;
      cq0[ctr+2] = c;
      cq0[ctr+3] = 0.5-c;
      cq0[ctr+4] = 0.5-c;
      cq0[ctr+5] = 0.5-c;

      cq1[ctr] = c;
      cq1[ctr+1] = 0.5-c;
      cq1[ctr+2] = 0.5-c;
      cq1[ctr+3] = c;
      cq1[ctr+4] = 0.5-c;
      cq1[ctr+5] = c;

      cq2[ctr] = 0.5-c;
      cq2[ctr+1] = 0.5-c;
      cq2[ctr+2] = c;
      cq2[ctr+3] = c;
      cq2[ctr+4] = c;
      cq2[ctr+5] = 0.5-c;
	for (int i=0; i<6; i++)
	{
		if(j==0){
		wq[ctr+i] = 0.00077331890737182713690269661719116;
		}
		if(j==1){
		wq[ctr+i] = 0.01755491389570430512641028370006205;
		}
	}
      ctr = ctr+6;
}
// 8 S211 symmetry orbits, 12 points each
for (int j=0; j<8; j++){
      if (j==0){
      d = 0.28318219770202728236417353077594322;
      e = 0.43037955664247500440987356786807501;
	}
      if(j==1){
      d	= 0.02239485904524970717572425710098278;
      e = 0.83488749018470024820940398932904512;
	}
      if(j==2){
      d	= 0.02191788402113435132324662419880111;
      e = 0.67691762094326571059673391273529166;
	}
      if(j==3){
      d	= 0.21481417044274656673534260788169227;
      e = 0.52280311286258745560867693994038579;
	}
      if(j==4){
      d	= 0.08000490008644308882018405418010744;
      e = 0.24689045570275147370034631014113188;
	}
      if(j==5){
      d	= 0.11579466150271899371721034492503850;
      e = 0.74997281767443310000000000000000000;
	}
      if(j==6){
      d	= 0.39129315347000474438672195978809687;
      e = 0.18835457382799180000000000000000000;
	}
      if(j==7){
      d	= 0.45315745821242834581317282468854978;
      e = 0.02202033169457796534173826092007299;
	}
      cq0[ctr] = d;
      cq0[ctr+1] = d;
      cq0[ctr+2] = d;
      cq0[ctr+3] = d;
      cq0[ctr+4] = d;
      cq0[ctr+5] = d;
      cq0[ctr+6] = e;
      cq0[ctr+7] = e;
      cq0[ctr+8] = e;
      cq0[ctr+9] = 1.0-2*d-e;
      cq0[ctr+10] = 1.0-2*d-e;
      cq0[ctr+11] = 1.0-2*d-e;

      cq1[ctr] = d;
      cq1[ctr+1] = d;
      cq1[ctr+2] = e;
      cq1[ctr+3] = e;
      cq1[ctr+4] = 1.0-2*d-e;
      cq1[ctr+5] = 1.0-2*d-e;
      cq1[ctr+6] = d;
      cq1[ctr+7] = d;
      cq1[ctr+8] = 1.0-2*d-e;
      cq1[ctr+9] = d;
      cq1[ctr+10] = d;
      cq1[ctr+11] = e;

      cq2[ctr] = e;
      cq2[ctr+1] = 1.0-2*d-e;
      cq2[ctr+2] = d;
      cq2[ctr+3] = 1.0-2*d-e;
      cq2[ctr+4] = d;
      cq2[ctr+5] = e;
      cq2[ctr+6] = d;
      cq2[ctr+7] = 1.0-2*d-e;
      cq2[ctr+8] = d;
      cq2[ctr+9] = d;
      cq2[ctr+10] = e;
      cq2[ctr+11] = d;
	for (int i=0; i<12; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00213830361001659899343287397434178;
	}
	if(j==1){
		wq[ctr+i] = 0.00256560169283338620814651902766716;
	}
	if(j==2){
		wq[ctr+i] = 0.00338953948455728203040932651810398;
	}
	if(j==3){
		wq[ctr+i] = 0.01135828330503278417235563981454793;
	}
	if(j==4){
		wq[ctr+i] = 0.01103203882197761043040360052454856;
	}
	if(j==5){
		wq[ctr+i] = 0.00457602573785952356043458354199517;
	}
	if(j==6){
		wq[ctr+i] = 0.00827343104220868129752243222682095;
	}
	if(j==7){
		wq[ctr+i] = 0.00586641165391940007076312979369247;
	}
	}
	ctr = ctr+12;
	}
// S111 symmetry orbit, 24 points each
for(int j=0; j<1; j++){
	if(j==0){
	f = 0.27324999892429634023602493512400674;
	g = 0.60775441245653315696274741541102470;
	h = 0.00561877924700169073874366184065955;
	}
	cq0[ctr] = f;
	cq0[ctr+1] = f;
	cq0[ctr+2] = f;
	cq0[ctr+3] = f;
	cq0[ctr+4] = f;
	cq0[ctr+5] = f;
	cq0[ctr+6] = g;
	cq0[ctr+7] = g;
	cq0[ctr+8] = g;
	cq0[ctr+9] = g;
	cq0[ctr+10] = g;
	cq0[ctr+11] = g;
	cq0[ctr+12] = h;
	cq0[ctr+13] = h;
	cq0[ctr+14] = h;
	cq0[ctr+15] = h; 
	cq0[ctr+16] = h;
	cq0[ctr+17] = h;
	cq0[ctr+18] = 1.0-f-g-h;
	cq0[ctr+19] = 1.0-f-g-h;
	cq0[ctr+20] = 1.0-f-g-h;
	cq0[ctr+21] = 1.0-f-g-h;
	cq0[ctr+22] = 1.0-f-g-h;
	cq0[ctr+23] = 1.0-f-g-h;

	cq1[ctr] = g;
	cq1[ctr+1] = g;
	cq1[ctr+2] = h;
	cq1[ctr+3] = h;
	cq1[ctr+4] = 1.0-f-g-h;
	cq1[ctr+5] = 1.0-f-g-h;
	cq1[ctr+6] = f;
	cq1[ctr+7] = f;
	cq1[ctr+8] = h;
	cq1[ctr+9] = h;
	cq1[ctr+10] = 1.0-f-g-h;
	cq1[ctr+11] = 1.0-f-g-h;
	cq1[ctr+12] = f;
	cq1[ctr+13] = f;
	cq1[ctr+14] = g;
	cq1[ctr+15] = g; 
	cq1[ctr+16] = 1.0-f-g-h;
	cq1[ctr+17] = 1.0-f-g-h;
	cq1[ctr+18] = f;
	cq1[ctr+19] = f;
	cq1[ctr+20] = g;
	cq1[ctr+21] = g;
	cq1[ctr+22] = h;
	cq1[ctr+23] = h;

	cq2[ctr] = h;
	cq2[ctr+1] = 1.0-f-g-h;
	cq2[ctr+2] = g;
	cq2[ctr+3] = 1.0-f-g-h;
	cq2[ctr+4] = g;
	cq2[ctr+5] = h;
	cq2[ctr+6] = h;
	cq2[ctr+7] = 1.0-f-g-h;
	cq2[ctr+8] = 1.0-f-g-h;
	cq2[ctr+9] = f;
	cq2[ctr+10] = h;
	cq2[ctr+11] = f;
	cq2[ctr+12] = g;
	cq2[ctr+13] = 1.0-f-g-h;
	cq2[ctr+14] = f;
	cq2[ctr+15] = 1.0-f-g-h; 
	cq2[ctr+16] = f;
	cq2[ctr+17] = g;
	cq2[ctr+18] = g;
	cq2[ctr+19] = h;
	cq2[ctr+20] = f;
	cq2[ctr+21] = h;
	cq2[ctr+22] = g;
	cq2[ctr+23] = f;

	for(int i=0; i<24; i++){
	if(j==0){
	wq[ctr+i] = 0.00313458521939849614410720196518793;
	}	
	}
ctr = ctr+24;
}
break;
      case 13 : //  Symmetric rule with nonnegative weights, order 14

      assert(nq == 194);

	ctr = 0;
// 5 S31 symmetry orbits, 4 points each
for(int j=0; j<5; j++){
	if(j==0){
	b = 0.12703434587701869604797950660749487;
	}
	if(j==1){
	b = 0.03716308713428675181759859706979325;
	}
	if(j==2){
	b = 0.30931161817607732544635505822019770;
	}
	if(j==3){
	b = 0.07778813507287403019691221965639750;
	}
	if(j==4){
	b = 0.01187611663683786502091234677477106;
	}

	cq0[ctr] = b;
	cq0[ctr+1] = 1.0-3*b;
	cq0[ctr+2] = b;
	cq0[ctr+3] = b;

	cq1[ctr] = b;
	cq1[ctr+1] = b;
	cq1[ctr+2] = 1.0-3*b;
	cq1[ctr+3] = b;

	cq2[ctr] = b;	
	cq2[ctr+1] = b;	
	cq2[ctr+2] = b;
	cq2[ctr+3] = 1.0-3*b;
	

	for (int i=0; i<4; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00898427322254918127543126682598773;
	}
	if(j==1){
		wq[ctr+i] = 0.00235414897468188299910869230818368;
	}
	if(j==2){
		wq[ctr+i] = 0.00733553866836377016223467789336265;
	}
	if(j==3){
		wq[ctr+i] = 0.00360629336228634011530354432318077;
	}
	if(j==4){
		wq[ctr+i] = 0.00022796656022189240650071390651338;
	}
	}
	ctr = ctr+4;
}
// 1 S22 symmetry orbits, 6 points each 

for(int j=0; j<1; j++){
	if(j==0){
	c = 0.02371189715571358237825633505545476; 
        }

      cq0[ctr] = c;
      cq0[ctr+1] = c;
      cq0[ctr+2] = c;
      cq0[ctr+3] = 0.5-c;
      cq0[ctr+4] = 0.5-c;
      cq0[ctr+5] = 0.5-c;

      cq1[ctr] = c;
      cq1[ctr+1] = 0.5-c;
      cq1[ctr+2] = 0.5-c;
      cq1[ctr+3] = c;
      cq1[ctr+4] = 0.5-c;
      cq1[ctr+5] = c;

      cq2[ctr] = 0.5-c;
      cq2[ctr+1] = 0.5-c;
      cq2[ctr+2] = c;
      cq2[ctr+3] = c;
      cq2[ctr+4] = c;
      cq2[ctr+5] = 0.5-c;
	for (int i=0; i<6; i++)
	{
		if(j==0){
		wq[ctr+i] = 0.00425068731230945391542573203967906;
		}
	}
      ctr = ctr+6;
}
// 10 S211 symmetry orbits, 12 points each
for (int j=0; j< 10; j++){
      if (j==0){
      d = 0.04551422172971295738029708158398140;
      e = 0.73884882267833978290969755547076243;
	}
      if(j==1){
      d	= 0.19457055431059420000000000000000000;
      e = 0.36138202354403612356128050094846106;
	}
      if(j==2){
      d	= 0.42158193164647035846631052119479790;
      e = 0.13481021809330111977392354242291205;
	}
      if(j==3){
      d	= 0.36227661803202431683389679069549247;
      e = 0.09100846759454444774082592541447308;
	}
      if(j==4){
      d	= 0.26662003783461096351186917353420086;
      e = 0.45135951603290056428206454329600320;
	}
      if(j==5){
      d	= 0.07870367664603755989163074150395650;
      e = 0.53854007868617855365162509332690316;
	}
      if(j==6){
      d	= 0.01462604843949452202375023818416595;
      e = 0.68140642280720592407050422036244765;
	}
      if(j==7){
      d	= 0.20755902173331721318141636044536441;
      e = 0.49641284136813420000000000000000000;
	}
      if(j==8){
      d	= 0.00317672566580133046838579859910808;
      e = 0.88571644680187933415518991697343211;
	}
      if(j==9){
      d	= 0.16634658949265576428233847556684871;
      e = 0.64221464654291632524678940601354742;
	}
      cq0[ctr] = d;
      cq0[ctr+1] = d;
      cq0[ctr+2] = d;
      cq0[ctr+3] = d;
      cq0[ctr+4] = d;
      cq0[ctr+5] = d;
      cq0[ctr+6] = e;
      cq0[ctr+7] = e;
      cq0[ctr+8] = e;
      cq0[ctr+9] = 1.0-2*d-e;
      cq0[ctr+10] = 1.0-2*d-e;
      cq0[ctr+11] = 1.0-2*d-e;

      cq1[ctr] = d;
      cq1[ctr+1] = d;
      cq1[ctr+2] = e;
      cq1[ctr+3] = e;
      cq1[ctr+4] = 1.0-2*d-e;
      cq1[ctr+5] = 1.0-2*d-e;
      cq1[ctr+6] = d;
      cq1[ctr+7] = d;
      cq1[ctr+8] = 1.0-2*d-e;
      cq1[ctr+9] = d;
      cq1[ctr+10] = d;
      cq1[ctr+11] = e;

      cq2[ctr] = e;
      cq2[ctr+1] = 1.0-2*d-e;
      cq2[ctr+2] = d;
      cq2[ctr+3] = 1.0-2*d-e;
      cq2[ctr+4] = d;
      cq2[ctr+5] = e;
      cq2[ctr+6] = d;
      cq2[ctr+7] = 1.0-2*d-e;
      cq2[ctr+8] = d;
      cq2[ctr+9] = d;
      cq2[ctr+10] = e;
      cq2[ctr+11] = d;
	for (int i=0; i<12; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00502229674184657212637707578731437;
	}
	if(j==1){
		wq[ctr+i] = 0.00664105199619194276141547967835717;
	}
	if(j==2){
		wq[ctr+i] = 0.00648663075652078221084713724389357;
	}
	if(j==3){
		wq[ctr+i] = 0.01084924609520658118048627917429636;
	}
	if(j==4){
		wq[ctr+i] = 0.00698225572400728567899793615355807;
	}
	if(j==5){
		wq[ctr+i] = 0.01057643198113441258335538488635301;
	}
	if(j==6){
		wq[ctr+i] = 0.00172517387494940531214061228255136;
	}
	if(j==7){
		wq[ctr+i] = 0.01064026039260234415487304925754523;
	}
	if(j==8){
		wq[ctr+i] = 0.00031627239419231128593612508289817;
	}
	if(j==9){
		wq[ctr+i] = 0.00676212093730203740266276007684025;
	}
	}
	ctr = ctr+12;
	}
// 2 S111 symmetry orbits, 24 points each
for(int j=0; j<2; j++){
	if(j==0){
	f = 0.59698804897542365623933181080626979;
	g = 0.30344194369885264264500117734906354;
	h = 0.00772105989990930297678960227638472;
	}
	if(j==1){
	f = 0.81379652801439184798325669233364806;
	g = 0.06021328978843793059084645285790579;
	h = 0.12582571438467239382589793638340901;
	}
	cq0[ctr] = f;
	cq0[ctr+1] = f;
	cq0[ctr+2] = f;
	cq0[ctr+3] = f;
	cq0[ctr+4] = f;
	cq0[ctr+5] = f;
	cq0[ctr+6] = g;
	cq0[ctr+7] = g;
	cq0[ctr+8] = g;
	cq0[ctr+9] = g;
	cq0[ctr+10] = g;
	cq0[ctr+11] = g;
	cq0[ctr+12] = h;
	cq0[ctr+13] = h;
	cq0[ctr+14] = h;
	cq0[ctr+15] = h; 
	cq0[ctr+16] = h;
	cq0[ctr+17] = h;
	cq0[ctr+18] = 1.0-f-g-h;
	cq0[ctr+19] = 1.0-f-g-h;
	cq0[ctr+20] = 1.0-f-g-h;
	cq0[ctr+21] = 1.0-f-g-h;
	cq0[ctr+22] = 1.0-f-g-h;
	cq0[ctr+23] = 1.0-f-g-h;

	cq1[ctr] = g;
	cq1[ctr+1] = g;
	cq1[ctr+2] = h;
	cq1[ctr+3] = h;
	cq1[ctr+4] = 1.0-f-g-h;
	cq1[ctr+5] = 1.0-f-g-h;
	cq1[ctr+6] = f;
	cq1[ctr+7] = f;
	cq1[ctr+8] = h;
	cq1[ctr+9] = h;
	cq1[ctr+10] = 1.0-f-g-h;
	cq1[ctr+11] = 1.0-f-g-h;
	cq1[ctr+12] = f;
	cq1[ctr+13] = f;
	cq1[ctr+14] = g;
	cq1[ctr+15] = g; 
	cq1[ctr+16] = 1.0-f-g-h;
	cq1[ctr+17] = 1.0-f-g-h;
	cq1[ctr+18] = f;
	cq1[ctr+19] = f;
	cq1[ctr+20] = g;
	cq1[ctr+21] = g;
	cq1[ctr+22] = h;
	cq1[ctr+23] = h;

	cq2[ctr] = h;
	cq2[ctr+1] = 1.0-f-g-h;
	cq2[ctr+2] = g;
	cq2[ctr+3] = 1.0-f-g-h;
	cq2[ctr+4] = g;
	cq2[ctr+5] = h;
	cq2[ctr+6] = h;
	cq2[ctr+7] = 1.0-f-g-h;
	cq2[ctr+8] = 1.0-f-g-h;
	cq2[ctr+9] = f;
	cq2[ctr+10] = h;
	cq2[ctr+11] = f;
	cq2[ctr+12] = g;
	cq2[ctr+13] = 1.0-f-g-h;
	cq2[ctr+14] = f;
	cq2[ctr+15] = 1.0-f-g-h; 
	cq2[ctr+16] = f;
	cq2[ctr+17] = g;
	cq2[ctr+18] = g;
	cq2[ctr+19] = h;
	cq2[ctr+20] = f;
	cq2[ctr+21] = h;
	cq2[ctr+22] = g;
	cq2[ctr+23] = f;

	for(int i=0; i<24; i++){
	if(j==0){
	wq[ctr+i] = 0.00293371746826111669254642316791922;
	}	
	if(j==1){
	wq[ctr+i] = 0.00091803679200083798695474146748587;
	}
	}
ctr = ctr+24;
}
break;
      case 14 : //  Symmetric rule with nonnegative weights, order 15

      assert(nq == 246);

	ctr = 0;
// 3 S31 symmetry orbits, 4 points each
for(int j=0; j<3; j++){
	if(j==0){
	b = 0.28124082071166706712228812256180659;
	}
	if(j==1){
	b = 0.00000100000000000000000000000000000;
	}
	if(j==2){
	b = 0.33056317367432518802610420354554872;
	}

	cq0[ctr] = b;
	cq0[ctr+1] = 1.0-3*b;
	cq0[ctr+2] = b;
	cq0[ctr+3] = b;

	cq1[ctr] = b;
	cq1[ctr+1] = b;
	cq1[ctr+2] = 1.0-3*b;
	cq1[ctr+3] = b;

	cq2[ctr] = b;	
	cq2[ctr+1] = b;	
	cq2[ctr+2] = b;
	cq2[ctr+3] = 1.0-3*b;
	

	for (int i=0; i<4; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.01511655113441068628579262410695901;
	}
	if(j==1){
		wq[ctr+i] = 0.00001738706704490033047765207649289;
	}
	if(j==2){
		wq[ctr+i] = 0.00408585202038717648728016969643145;
	}
	}
	ctr = ctr+4;
}
// 3 S22 symmetry orbits, 6 points each 

for(int j=0; j<3; j++){
	if(j==0){
	c = 0.05655437237844684197147304064357931; 
        }
	if(j==1){
	c = 0.13406515374085695587554535149192519; 
        }
	if(j==2){
	c = 0.01239081855247817851688132222166487; 
        }

      cq0[ctr] = c;
      cq0[ctr+1] = c;
      cq0[ctr+2] = c;
      cq0[ctr+3] = 0.5-c;
      cq0[ctr+4] = 0.5-c;
      cq0[ctr+5] = 0.5-c;

      cq1[ctr] = c;
      cq1[ctr+1] = 0.5-c;
      cq1[ctr+2] = 0.5-c;
      cq1[ctr+3] = c;
      cq1[ctr+4] = 0.5-c;
      cq1[ctr+5] = c;

      cq2[ctr] = 0.5-c;
      cq2[ctr+1] = 0.5-c;
      cq2[ctr+2] = c;
      cq2[ctr+3] = c;
      cq2[ctr+4] = c;
      cq2[ctr+5] = 0.5-c;
	for (int i=0; i<6; i++)
	{
		if(j==0){
		wq[ctr+i] = 0.00592951036834067574154481489521970;
		}
		if(j==1){
		wq[ctr+i] = 0.01420051324006323918208630429532935;
		}
		if(j==2){
		wq[ctr+i] = 0.00136583559622061392953778218648684;
		}
	}
      ctr = ctr+6;
}
// 12 S211 symmetry orbits, 12 points each
for (int j=0; j< 12; j++){
      if (j==0){
      d = 0.14221122178861693892726683983688389;
      e = 0.64809821878560890000000000000000000;
	}
      if(j==1){
      d	= 0.02090030455681822945106611831783482;
      e = 0.65116321211987558801152908926761095;
	}
      if(j==2){
      d	= 0.10144207052995866487339983352935483;
      e = 0.79447457077349830086964982075533754;
	}
      if(j==3){
      d	= 0.08775565461483070674887889035957709;
      e = 0.53891506037733579601146950816566679;
	}
      if(j==4){
      d	= 0.01998436504573363744360581546507844;
      e = 0.84228234042896665795195102873353839;
	}
      if(j==5){
      d	= 0.06649943952962487000000000000000000;
      e = 0.80627017415793485464777412253196755;
	}
      if(j==6){
      d	= 0.25438425646033346908988464012136442;
      e = 0.42513796317252088424321606777763436;
	}
      if(j==7){
      d	= 0.00234540856303606208380148727978905;
      e = 0.77743944851625139876389227055364820;
	}
      if(j==8){
      d	= 0.21804126228722166267028321193653146;
      e = 0.56369987819744481913063704381874069;
	}
      if(j==9){
      d	= 0.17628473381389930000000000000000000;
      e = 0.47113514937830371190183410485213220;
	}
      if(j==10){
      d	= 0.03692599014419112524447544153674980;
      e = 0.92319344206103834904944651746567873;
	}
      if(j==11){
      d	= 0.39915131927633474627502159614222501;
      e = 0.18025052210917373840254964287864445;
	}
      cq0[ctr] = d;
      cq0[ctr+1] = d;
      cq0[ctr+2] = d;
      cq0[ctr+3] = d;
      cq0[ctr+4] = d;
      cq0[ctr+5] = d;
      cq0[ctr+6] = e;
      cq0[ctr+7] = e;
      cq0[ctr+8] = e;
      cq0[ctr+9] = 1.0-2*d-e;
      cq0[ctr+10] = 1.0-2*d-e;
      cq0[ctr+11] = 1.0-2*d-e;

      cq1[ctr] = d;
      cq1[ctr+1] = d;
      cq1[ctr+2] = e;
      cq1[ctr+3] = e;
      cq1[ctr+4] = 1.0-2*d-e;
      cq1[ctr+5] = 1.0-2*d-e;
      cq1[ctr+6] = d;
      cq1[ctr+7] = d;
      cq1[ctr+8] = 1.0-2*d-e;
      cq1[ctr+9] = d;
      cq1[ctr+10] = d;
      cq1[ctr+11] = e;

      cq2[ctr] = e;
      cq2[ctr+1] = 1.0-2*d-e;
      cq2[ctr+2] = d;
      cq2[ctr+3] = 1.0-2*d-e;
      cq2[ctr+4] = d;
      cq2[ctr+5] = e;
      cq2[ctr+6] = d;
      cq2[ctr+7] = 1.0-2*d-e;
      cq2[ctr+8] = d;
      cq2[ctr+9] = d;
      cq2[ctr+10] = e;
      cq2[ctr+11] = d;
	for (int i=0; i<12; i++)
	{
	if(j==0){
		wq[ctr+i] = 0.00597843624352069400428887732014643;
	}
	if(j==1){
		wq[ctr+i] = 0.00213385927130234729441847373974791;
	}
	if(j==2){
		wq[ctr+i] = 0.00085751208108799141852494440382306;
	}
	if(j==3){
		wq[ctr+i] = 0.00655418423314395143320591423869070;
	}
	if(j==4){
		wq[ctr+i] = 0.00145239359342879306554178830466918;
	}
	if(j==5){
		wq[ctr+i] = 0.00147765208012100448758842442963730;
	}
	if(j==6){
		wq[ctr+i] = 0.01081554170660306739887132139435944;
	}
	if(j==7){
		wq[ctr+i] = 0.00024706437793471016224470871566645;
	}
	if(j==8){
		wq[ctr+i] = 0.00234657677419497479387086599232896;
	}
	if(j==9){
		wq[ctr+i] = 0.00558455102470039972935684386805533;
	}
	if(j==10){
		wq[ctr+i] = 0.00047614970218433417418631138964354;
	}
	if(j==11){
		wq[ctr+i] = 0.00652552745936288648367228758797825;
	}
	}
	ctr = ctr+12;
	}
// 3 S111 symmetry orbits, 24 points each
for(int j=0; j<3; j++){
	if(j==0){
	f = 0.70992232018321836731926292111215212;
	g = 0.07781901333037738366765196393633786;
	h = 0.01956139662389449507339296707905076;
	}
	if(j==1){
	f = 0.55032805389206083155759265306174001;
	g = 0.08164397664371474524823001052216509;
	h = 0.00913454545923239001997189364340146;
	}
	if(j==2){
	f = 0.55025255453513500000000000000000000;
	g = 0.14593285191012480000000000000000000;
	h = 0.04144548457433058363391383686956707;
	}
	cq0[ctr] = f;
	cq0[ctr+1] = f;
	cq0[ctr+2] = f;
	cq0[ctr+3] = f;
	cq0[ctr+4] = f;
	cq0[ctr+5] = f;
	cq0[ctr+6] = g;
	cq0[ctr+7] = g;
	cq0[ctr+8] = g;
	cq0[ctr+9] = g;
	cq0[ctr+10] = g;
	cq0[ctr+11] = g;
	cq0[ctr+12] = h;
	cq0[ctr+13] = h;
	cq0[ctr+14] = h;
	cq0[ctr+15] = h; 
	cq0[ctr+16] = h;
	cq0[ctr+17] = h;
	cq0[ctr+18] = 1.0-f-g-h;
	cq0[ctr+19] = 1.0-f-g-h;
	cq0[ctr+20] = 1.0-f-g-h;
	cq0[ctr+21] = 1.0-f-g-h;
	cq0[ctr+22] = 1.0-f-g-h;
	cq0[ctr+23] = 1.0-f-g-h;

	cq1[ctr] = g;
	cq1[ctr+1] = g;
	cq1[ctr+2] = h;
	cq1[ctr+3] = h;
	cq1[ctr+4] = 1.0-f-g-h;
	cq1[ctr+5] = 1.0-f-g-h;
	cq1[ctr+6] = f;
	cq1[ctr+7] = f;
	cq1[ctr+8] = h;
	cq1[ctr+9] = h;
	cq1[ctr+10] = 1.0-f-g-h;
	cq1[ctr+11] = 1.0-f-g-h;
	cq1[ctr+12] = f;
	cq1[ctr+13] = f;
	cq1[ctr+14] = g;
	cq1[ctr+15] = g; 
	cq1[ctr+16] = 1.0-f-g-h;
	cq1[ctr+17] = 1.0-f-g-h;
	cq1[ctr+18] = f;
	cq1[ctr+19] = f;
	cq1[ctr+20] = g;
	cq1[ctr+21] = g;
	cq1[ctr+22] = h;
	cq1[ctr+23] = h;

	cq2[ctr] = h;
	cq2[ctr+1] = 1.0-f-g-h;
	cq2[ctr+2] = g;
	cq2[ctr+3] = 1.0-f-g-h;
	cq2[ctr+4] = g;
	cq2[ctr+5] = h;
	cq2[ctr+6] = h;
	cq2[ctr+7] = 1.0-f-g-h;
	cq2[ctr+8] = 1.0-f-g-h;
	cq2[ctr+9] = f;
	cq2[ctr+10] = h;
	cq2[ctr+11] = f;
	cq2[ctr+12] = g;
	cq2[ctr+13] = 1.0-f-g-h;
	cq2[ctr+14] = f;
	cq2[ctr+15] = 1.0-f-g-h; 
	cq2[ctr+16] = f;
	cq2[ctr+17] = g;
	cq2[ctr+18] = g;
	cq2[ctr+19] = h;
	cq2[ctr+20] = f;
	cq2[ctr+21] = h;
	cq2[ctr+22] = g;
	cq2[ctr+23] = f;

	for(int i=0; i<24; i++){
	if(j==0){
	wq[ctr+i] = 0.00355529314103980065711359565274541;
	}	
	if(j==1){
	wq[ctr+i] = 0.00254671621466224217846844420241250;
	}
	if(j==2){
	wq[ctr+i] = 0.00476266986570878721098194646156262;
	}
	}
ctr = ctr+24;
}
break;

//    case 7 :
//      assert(nq == 84);
//      cq0[0] = 0.1000000000000000;
//      cq1[0] = 0.1000000000000000;
//      cq2[0] = 0.1000000000000000;
//      cq0[1] = 0.1000000000000000;
//      cq1[1] = 0.1000000000000000;
//      cq2[1] = 0.7000000000000000;
//      cq0[2] = 0.1000000000000000;
//      cq1[2] = 0.7000000000000000;
//      cq2[2] = 0.1000000000000000;
//      cq0[3] = 0.7000000000000000;
//      cq1[3] = 0.1000000000000000;
//      cq2[3] = 0.1000000000000000;
//      cq0[4] = 0.1000000000000000;
//      cq1[4] = 0.1000000000000000;
//      cq2[4] = 0.6000000000000000;
//      cq0[5] = 0.1000000000000000;
//      cq1[5] = 0.1000000000000000;
//      cq2[5] = 0.2000000000000000;
//      cq0[6] = 0.1000000000000000;
//      cq1[6] = 0.6000000000000000;
//      cq2[6] = 0.1000000000000000;
//      cq0[7] = 0.1000000000000000;
//      cq1[7] = 0.6000000000000000;
//      cq2[7] = 0.2000000000000000;
//      cq0[8] = 0.1000000000000000;
//      cq1[8] = 0.2000000000000000;
//      cq2[8] = 0.1000000000000000;
//      cq0[9] = 0.1000000000000000;
//      cq1[9] = 0.2000000000000000;
//      cq2[9] = 0.6000000000000000;
//      cq0[10] = 0.6000000000000000;
//      cq1[10] = 0.1000000000000000;
//      cq2[10] = 0.1000000000000000;
//      cq0[11] = 0.6000000000000000;
//      cq1[11] = 0.1000000000000000;
//      cq2[11] = 0.2000000000000000;
//      cq0[12] = 0.6000000000000000;
//      cq1[12] = 0.2000000000000000;
//      cq2[12] = 0.1000000000000000;
//      cq0[13] = 0.2000000000000000;
//      cq1[13] = 0.1000000000000000;
//      cq2[13] = 0.1000000000000000;
//      cq0[14] = 0.2000000000000000;
//      cq1[14] = 0.1000000000000000;
//      cq2[14] = 0.6000000000000000;
//      cq0[15] = 0.2000000000000000;
//      cq1[15] = 0.6000000000000000;
//      cq2[15] = 0.1000000000000000;
//      cq0[16] = 0.1000000000000000;
//      cq1[16] = 0.1000000000000000;
//      cq2[16] = 0.5000000000000000;
//      cq0[17] = 0.1000000000000000;
//      cq1[17] = 0.1000000000000000;
//      cq2[17] = 0.3000000000000000;
//      cq0[18] = 0.1000000000000000;
//      cq1[18] = 0.5000000000000000;
//      cq2[18] = 0.1000000000000000;
//      cq0[19] = 0.1000000000000000;
//      cq1[19] = 0.5000000000000000;
//      cq2[19] = 0.3000000000000000;
//      cq0[20] = 0.1000000000000000;
//      cq1[20] = 0.3000000000000000;
//      cq2[20] = 0.1000000000000000;
//      cq0[21] = 0.1000000000000000;
//      cq1[21] = 0.3000000000000000;
//      cq2[21] = 0.5000000000000000;
//      cq0[22] = 0.5000000000000000;
//      cq1[22] = 0.1000000000000000;
//      cq2[22] = 0.1000000000000000;
//      cq0[23] = 0.5000000000000000;
//      cq1[23] = 0.1000000000000000;
//      cq2[23] = 0.3000000000000000;
//      cq0[24] = 0.5000000000000000;
//      cq1[24] = 0.3000000000000000;
//      cq2[24] = 0.1000000000000000;
//      cq0[25] = 0.3000000000000000;
//      cq1[25] = 0.1000000000000000;
//      cq2[25] = 0.1000000000000000;
//      cq0[26] = 0.3000000000000000;
//      cq1[26] = 0.1000000000000000;
//      cq2[26] = 0.5000000000000000;
//      cq0[27] = 0.3000000000000000;
//      cq1[27] = 0.5000000000000000;
//      cq2[27] = 0.1000000000000000;
//      cq0[28] = 0.2000000000000000;
//      cq1[28] = 0.2000000000000000;
//      cq2[28] = 0.1000000000000000;
//      cq0[29] = 0.2000000000000000;
//      cq1[29] = 0.2000000000000000;
//      cq2[29] = 0.5000000000000000;
//      cq0[30] = 0.2000000000000000;
//      cq1[30] = 0.1000000000000000;
//      cq2[30] = 0.2000000000000000;
//      cq0[31] = 0.2000000000000000;
//      cq1[31] = 0.1000000000000000;
//      cq2[31] = 0.5000000000000000;
//      cq0[32] = 0.2000000000000000;
//      cq1[32] = 0.5000000000000000;
//      cq2[32] = 0.2000000000000000;
//      cq0[33] = 0.2000000000000000;
//      cq1[33] = 0.5000000000000000;
//      cq2[33] = 0.1000000000000000;
//      cq0[34] = 0.1000000000000000;
//      cq1[34] = 0.2000000000000000;
//      cq2[34] = 0.2000000000000000;
//      cq0[35] = 0.1000000000000000;
//      cq1[35] = 0.2000000000000000;
//      cq2[35] = 0.5000000000000000;
//      cq0[36] = 0.1000000000000000;
//      cq1[36] = 0.5000000000000000;
//      cq2[36] = 0.2000000000000000;
//      cq0[37] = 0.5000000000000000;
//      cq1[37] = 0.2000000000000000;
//      cq2[37] = 0.2000000000000000;
//      cq0[38] = 0.5000000000000000;
//      cq1[38] = 0.2000000000000000;
//      cq2[38] = 0.1000000000000000;
//      cq0[39] = 0.5000000000000000;
//      cq1[39] = 0.1000000000000000;
//      cq2[39] = 0.2000000000000000;
//      cq0[40] = 0.4000000000000000;
//      cq1[40] = 0.4000000000000000;
//      cq2[40] = 0.1000000000000000;
//      cq0[41] = 0.4000000000000000;
//      cq1[41] = 0.1000000000000000;
//      cq2[41] = 0.4000000000000000;
//      cq0[42] = 0.4000000000000000;
//      cq1[42] = 0.1000000000000000;
//      cq2[42] = 0.1000000000000000;
//      cq0[43] = 0.1000000000000000;
//      cq1[43] = 0.4000000000000000;
//      cq2[43] = 0.4000000000000000;
//      cq0[44] = 0.1000000000000000;
//      cq1[44] = 0.4000000000000000;
//      cq2[44] = 0.1000000000000000;
//      cq0[45] = 0.1000000000000000;
//      cq1[45] = 0.1000000000000000;
//      cq2[45] = 0.4000000000000000;
//      cq0[46] = 0.4000000000000000;
//      cq1[46] = 0.3000000000000000;
//      cq2[46] = 0.2000000000000000;
//      cq0[47] = 0.4000000000000000;
//      cq1[47] = 0.3000000000000000;
//      cq2[47] = 0.1000000000000000;
//      cq0[48] = 0.4000000000000000;
//      cq1[48] = 0.2000000000000000;
//      cq2[48] = 0.3000000000000000;
//      cq0[49] = 0.4000000000000000;
//      cq1[49] = 0.2000000000000000;
//      cq2[49] = 0.1000000000000000;
//      cq0[50] = 0.4000000000000000;
//      cq1[50] = 0.1000000000000000;
//      cq2[50] = 0.3000000000000000;
//      cq0[51] = 0.4000000000000000;
//      cq1[51] = 0.1000000000000000;
//      cq2[51] = 0.2000000000000000;
//      cq0[52] = 0.3000000000000000;
//      cq1[52] = 0.4000000000000000;
//      cq2[52] = 0.2000000000000000;
//      cq0[53] = 0.3000000000000000;
//      cq1[53] = 0.4000000000000000;
//      cq2[53] = 0.1000000000000000;
//      cq0[54] = 0.3000000000000000;
//      cq1[54] = 0.2000000000000000;
//      cq2[54] = 0.4000000000000000;
//      cq0[55] = 0.3000000000000000;
//      cq1[55] = 0.2000000000000000;
//      cq2[55] = 0.1000000000000000;
//      cq0[56] = 0.3000000000000000;
//      cq1[56] = 0.1000000000000000;
//      cq2[56] = 0.4000000000000000;
//      cq0[57] = 0.3000000000000000;
//      cq1[57] = 0.1000000000000000;
//      cq2[57] = 0.2000000000000000;
//      cq0[58] = 0.2000000000000000;
//      cq1[58] = 0.4000000000000000;
//      cq2[58] = 0.3000000000000000;
//      cq0[59] = 0.2000000000000000;
//      cq1[59] = 0.4000000000000000;
//      cq2[59] = 0.1000000000000000;
//      cq0[60] = 0.2000000000000000;
//      cq1[60] = 0.3000000000000000;
//      cq2[60] = 0.4000000000000000;
//      cq0[61] = 0.2000000000000000;
//      cq1[61] = 0.3000000000000000;
//      cq2[61] = 0.1000000000000000;
//      cq0[62] = 0.2000000000000000;
//      cq1[62] = 0.1000000000000000;
//      cq2[62] = 0.4000000000000000;
//      cq0[63] = 0.2000000000000000;
//      cq1[63] = 0.1000000000000000;
//      cq2[63] = 0.3000000000000000;
//      cq0[64] = 0.1000000000000000;
//      cq1[64] = 0.4000000000000000;
//      cq2[64] = 0.3000000000000000;
//      cq0[65] = 0.1000000000000000;
//      cq1[65] = 0.4000000000000000;
//      cq2[65] = 0.2000000000000000;
//      cq0[66] = 0.1000000000000000;
//      cq1[66] = 0.3000000000000000;
//      cq2[66] = 0.4000000000000000;
//      cq0[67] = 0.1000000000000000;
//      cq1[67] = 0.3000000000000000;
//      cq2[67] = 0.2000000000000000;
//      cq0[68] = 0.1000000000000000;
//      cq1[68] = 0.2000000000000000;
//      cq2[68] = 0.4000000000000000;
//      cq0[69] = 0.1000000000000000;
//      cq1[69] = 0.2000000000000000;
//      cq2[69] = 0.3000000000000000;
//      cq0[70] = 0.2000000000000000;
//      cq1[70] = 0.2000000000000000;
//      cq2[70] = 0.2000000000000000;
//      cq0[71] = 0.2000000000000000;
//      cq1[71] = 0.2000000000000000;
//      cq2[71] = 0.4000000000000000;
//      cq0[72] = 0.2000000000000000;
//      cq1[72] = 0.4000000000000000;
//      cq2[72] = 0.2000000000000000;
//      cq0[73] = 0.4000000000000000;
//      cq1[73] = 0.2000000000000000;
//      cq2[73] = 0.2000000000000000;
//      cq0[74] = 0.3000000000000000;
//      cq1[74] = 0.3000000000000000;
//      cq2[74] = 0.3000000000000000;
//      cq0[75] = 0.3000000000000000;
//      cq1[75] = 0.3000000000000000;
//      cq2[75] = 0.1000000000000000;
//      cq0[76] = 0.3000000000000000;
//      cq1[76] = 0.1000000000000000;
//      cq2[76] = 0.3000000000000000;
//      cq0[77] = 0.1000000000000000;
//      cq1[77] = 0.3000000000000000;
//      cq2[77] = 0.3000000000000000;
//      cq0[78] = 0.3000000000000000;
//      cq1[78] = 0.3000000000000000;
//      cq2[78] = 0.2000000000000000;
//      cq0[79] = 0.3000000000000000;
//      cq1[79] = 0.2000000000000000;
//      cq2[79] = 0.3000000000000000;
//      cq0[80] = 0.3000000000000000;
//      cq1[80] = 0.2000000000000000;
//      cq2[80] = 0.2000000000000000;
//      cq0[81] = 0.2000000000000000;
//      cq1[81] = 0.3000000000000000;
//      cq2[81] = 0.3000000000000000;
//      cq0[82] = 0.2000000000000000;
//      cq1[82] = 0.3000000000000000;
//      cq2[82] = 0.2000000000000000;
//      cq0[83] = 0.2000000000000000;
//      cq1[83] = 0.2000000000000000;
//      cq2[83] = 0.3000000000000000;

//      wq[0] = 0.2843915343915344;
//      wq[1] = 0.2843915343915344;
//      wq[2] = 0.2843915343915344;
//      wq[3] = 0.2843915343915344;
//      wq[4] = -0.3882275132275133;
//      wq[5] = -0.3882275132275133;
//      wq[6] = -0.3882275132275133;
//      wq[7] = -0.3882275132275133;
//      wq[8] = -0.3882275132275133;
//      wq[9] = -0.3882275132275133;
//      wq[10] = -0.3882275132275133;
//      wq[11] = -0.3882275132275133;
//      wq[12] = -0.3882275132275133;
//      wq[13] = -0.3882275132275133;
//      wq[14] = -0.3882275132275133;
//      wq[15] = -0.3882275132275133;
//      wq[16] = 0.8776455026455027;
//      wq[17] = 0.8776455026455027;
//      wq[18] = 0.8776455026455027;
//      wq[19] = 0.8776455026455027;
//      wq[20] = 0.8776455026455027;
//      wq[21] = 0.8776455026455027;
//      wq[22] = 0.8776455026455027;
//      wq[23] = 0.8776455026455027;
//      wq[24] = 0.8776455026455027;
//      wq[25] = 0.8776455026455027;
//      wq[26] = 0.8776455026455027;
//      wq[27] = 0.8776455026455027;
//      wq[28] = 0.1236772486772487;
//      wq[29] = 0.1236772486772487;
//      wq[30] = 0.1236772486772487;
//      wq[31] = 0.1236772486772487;
//      wq[32] = 0.1236772486772487;
//      wq[33] = 0.1236772486772487;
//      wq[34] = 0.1236772486772487;
//      wq[35] = 0.1236772486772487;
//      wq[36] = 0.1236772486772487;
//      wq[37] = 0.1236772486772487;
//      wq[38] = 0.1236772486772487;
//      wq[39] = 0.1236772486772487;
//      wq[40] = -0.8584656084656085;
//      wq[41] = -0.8584656084656085;
//      wq[42] = -0.8584656084656085;
//      wq[43] = -0.8584656084656085;
//      wq[44] = -0.8584656084656085;
//      wq[45] = -0.8584656084656085;
//      wq[46] = -0.2632275132275133;
//      wq[47] = -0.2632275132275133;
//      wq[48] = -0.2632275132275133;
//      wq[49] = -0.2632275132275133;
//      wq[50] = -0.2632275132275133;
//      wq[51] = -0.2632275132275133;
//      wq[52] = -0.2632275132275133;
//      wq[53] = -0.2632275132275133;
//      wq[54] = -0.2632275132275133;
//      wq[55] = -0.2632275132275133;
//      wq[56] = -0.2632275132275133;
//      wq[57] = -0.2632275132275133;
//      wq[58] = -0.2632275132275133;
//      wq[59] = -0.2632275132275133;
//      wq[60] = -0.2632275132275133;
//      wq[61] = -0.2632275132275133;
//      wq[62] = -0.2632275132275133;
//      wq[63] = -0.2632275132275133;
//      wq[64] = -0.2632275132275133;
//      wq[65] = -0.2632275132275133;
//      wq[66] = -0.2632275132275133;
//      wq[67] = -0.2632275132275133;
//      wq[68] = -0.2632275132275133;
//      wq[69] = -0.2632275132275133;
//      wq[70] = 0.0145502645502645;
//      wq[71] = 0.0145502645502645;
//      wq[72] = 0.0145502645502645;
//      wq[73] = 0.0145502645502645;
//      wq[74] = 1.0165343915343916;
//      wq[75] = 1.0165343915343916;
//      wq[76] = 1.0165343915343916;
//      wq[77] = 1.0165343915343916;
//      wq[78] = -0.0251322751322751;
//      wq[79] = -0.0251322751322751;
//      wq[80] = -0.0251322751322751;
//      wq[81] = -0.0251322751322751;
//      wq[82] = -0.0251322751322751;
//      wq[83] = -0.0251322751322751;
//      break;

    default :
      std::cerr << "\n";
      std::cerr << "TETRA_UNIT_SET - Fatal error!\n";
      std::cerr << "  Illegal value of RULE = " << rule << "\n";
      exit(1);
  }
}

} // end namespace HArDCore3D
